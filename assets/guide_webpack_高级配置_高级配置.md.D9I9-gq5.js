import{_ as e,c as o,o as a,V as t}from"./chunks/framework.YnO4XY28.js";const _=JSON.parse('{"title":"高级配置介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/webpack/高级配置/高级配置.md","filePath":"guide/webpack/高级配置/高级配置.md","lastUpdated":1732283740000}'),r={name:"guide/webpack/高级配置/高级配置.md"},l=t('<h1 id="高级配置介绍" tabindex="-1">高级配置介绍 <a class="header-anchor" href="#高级配置介绍" aria-label="Permalink to &quot;高级配置介绍&quot;">​</a></h1><p>所谓高级配置其实就是进行webpack优化，让我们代码在编译/运行时性能更好。我们可以从以下4个角度对webpack进行优化：</p><h3 id="提升开发体验" tabindex="-1">提升开发体验 <a class="header-anchor" href="#提升开发体验" aria-label="Permalink to &quot;提升开发体验&quot;">​</a></h3><ul><li>使用Source Map让开发或上线时代码报错能有更加准确的错误提示</li></ul><h3 id="提升打包构建速度" tabindex="-1">提升打包构建速度 <a class="header-anchor" href="#提升打包构建速度" aria-label="Permalink to &quot;提升打包构建速度&quot;">​</a></h3><ul><li><p>使用 <strong><code>HotModuleReplacement</code></strong> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快</p></li><li><p>使用 <strong><code>OneOf</code></strong> 让资源文件一旦被某个loader处理了，就不会继续遍历了，打包速度更快</p></li><li><p>使用 <strong><code>Include/Exclude</code></strong> 排除或只检测某些文件，处理的文件更少，速度更快</p></li><li><p>使用 <strong><code>Cache</code></strong> 对eslint和babel处理的结果进行缓存，让第二次打包速度更快 使用Thead多进程处理eslint和babel任务，速度更快（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果）</p></li></ul><h3 id="减少代码体积" tabindex="-1">减少代码体积 <a class="header-anchor" href="#减少代码体积" aria-label="Permalink to &quot;减少代码体积&quot;">​</a></h3><ul><li><p>使用 <strong><code>Tree Shaking</code></strong> 剔除了没有使用的多余代码，让代码体积更小</p></li><li><p>使用 <strong><code>@babel/plugin-transform-runtime</code></strong> 插件对babel进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小</p></li><li><p>使用 <strong><code>Image Minimizer</code></strong> 对项目中图片进行压缩，体积更小，请求速度更快（需要注意的是，如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩）</p></li></ul><h3 id="优化代码运行性能" tabindex="-1">优化代码运行性能 <a class="header-anchor" href="#优化代码运行性能" aria-label="Permalink to &quot;优化代码运行性能&quot;">​</a></h3><ul><li><p>使用 <strong><code>Code Split</code></strong> 对代码进行分割成多个js文件，从而使单个文件体积更小，并行加载js速度更快，并通过import动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源</p></li><li><p>使用 <strong><code>Preload / Prefetch</code></strong> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好</p></li><li><p>使用 <strong><code>Network Cache</code></strong> 能对输出资源文件进行更好的命名，来好做缓存，从而用户体验更好</p></li><li><p>使用 <strong><code>Core-js</code></strong> 对js进行兼容性处理，让我们代码能运行在低版本浏览器</p></li><li><p>使用 <strong><code>PWA</code></strong> 能让代码离线也能访问，从而提升用户体验</p></li></ul>',10),i=[l];function n(c,d,s,p,h,u){return a(),o("div",null,i)}const b=e(r,[["render",n]]);export{_ as __pageData,b as default};
