import{_ as a,c as t,o as e,V as o}from"./chunks/framework.YnO4XY28.js";const g=JSON.parse('{"title":"模块化概述","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/模块/模块化概述.md","filePath":"guide/javascript/es/模块/模块化概述.md","lastUpdated":1732283740000}'),i={name:"guide/javascript/es/模块/模块化概述.md"},r=o('<h1 id="模块化概述" tabindex="-1">模块化概述 <a class="header-anchor" href="#模块化概述" aria-label="Permalink to &quot;模块化概述&quot;">​</a></h1><h2 id="什么是模块化" tabindex="-1">什么是模块化 <a class="header-anchor" href="#什么是模块化" aria-label="Permalink to &quot;什么是模块化&quot;">​</a></h2><ul><li><p>将程序文件依据一定规则拆分成多个文件，这种编码方式就是模块化的编码方式。</p></li><li><p>拆分出来的<strong>每个文件就是一个模块</strong>，模块中的数据都是<strong>私有的</strong>，模块之间互相<strong>隔离</strong>。</p></li><li><p>同时也能通过一些手段，可以把模块内的指定数据「交出去」，供其他模块使用。</p></li></ul><h2 id="为什么需要模块化" tabindex="-1">为什么需要模块化 <a class="header-anchor" href="#为什么需要模块化" aria-label="Permalink to &quot;为什么需要模块化&quot;">​</a></h2><p>随着应用的复杂度越来越高，其代码量和文件数量都会急剧增加，会逐渐引发以下问题：</p><ol><li>全局污染问题</li><li>依赖混乱问题</li><li>数据安全问题</li></ol><h2 id="有哪些模块化规范" tabindex="-1">有哪些模块化规范 <a class="header-anchor" href="#有哪些模块化规范" aria-label="Permalink to &quot;有哪些模块化规范&quot;">​</a></h2><ol><li><strong>CommonJS - 服务端应用广泛</strong></li><li>AMD</li><li>CMD</li><li><strong>ES6 模块化 - 浏览器端应用广泛</strong></li></ol><h2 id="导入与导出的概念" tabindex="-1">导入与导出的概念 <a class="header-anchor" href="#导入与导出的概念" aria-label="Permalink to &quot;导入与导出的概念&quot;">​</a></h2><p>模块化的核心思想就是：模块之间是<strong>隔离的</strong>，通过<strong>导入</strong>和<strong>导出</strong>进行数据和功能的共享。</p><ul><li>导出（暴露）：模块公开其一部分（如变量、函数等），使这些内容可以被其他模块使用</li><li>导入（引入）：模块引入和使用其他模块导出的内容，以重用代码和功能。</li></ul>',11),l=[r];function s(n,d,c,_,h,p){return e(),t("div",null,l)}const m=a(i,[["render",s]]);export{g as __pageData,m as default};
