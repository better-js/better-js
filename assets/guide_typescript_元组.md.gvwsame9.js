import{_ as s,c as i,o as a,V as n}from"./chunks/framework.YnO4XY28.js";const g=JSON.parse('{"title":"元组","description":"","frontmatter":{},"headers":[],"relativePath":"guide/typescript/元组.md","filePath":"guide/typescript/元组.md","lastUpdated":1732283740000}'),t={name:"guide/typescript/元组.md"},e=n(`<h1 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h1><p>在 TypeScript 中，元组（Tuple）是一种特殊的数组类型，它允许定义一个已知元素数量和类型的数组。</p><ul><li><p>元组的类型在定义时就固定下来，并且每个位置的元素类型是已知的</p></li><li><p>可以通过索引来访问元组中的元素，并且 ts 会根据索引推断出元素的类型</p></li><li><p>元组的长度是固定的，一旦定义就不能添加或删除元素。</p><ul><li>元组在新增内容的时候，不能添加额外类型的值，只能是已有类型，而且增加后无法访问（安全问题）</li></ul></li><li><p>元素可以包含可选元素（类似可选参数），通过在类型后面加问号 <code>?</code></p></li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dancy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,4),p=[e];function l(h,k,r,d,c,o){return a(),i("div",null,p)}const y=s(t,[["render",l]]);export{g as __pageData,y as default};
