import{_ as s,c as a,o as i,V as n}from"./chunks/framework.__fMkWnK.js";const u=JSON.parse('{"title":"作用域","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/作用域/作用域.md","filePath":"guide/javascript/es/作用域/作用域.md","lastUpdated":1732283740000}'),l={name:"guide/javascript/es/作用域/作用域.md"},e=n(`<h1 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h1><blockquote><p>作用域是根据名称查找变量的一套规则</p><p>作用域无法通过 JavaScript 代码访问，它存在于 JavaScript 引擎内部。</p></blockquote><h2 id="作用域的两种工作模型" tabindex="-1">作用域的两种工作模型 <a class="header-anchor" href="#作用域的两种工作模型" aria-label="Permalink to &quot;作用域的两种工作模型&quot;">​</a></h2><ul><li><p>词法作用域</p><ul><li>词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则</li><li>特征：词法作用域的定义过程发生在代码的书写阶段</li></ul></li><li><p>动态作用域</p><ul><li>动态作用域并不关心函数和作用域是如何声明以及在何处声明，只关心它们从何处调用</li><li>作用域链是基于调用栈的，而不是代码中的作用域嵌套</li><li>特征：动态作用域是在运行时确定的。</li></ul></li></ul><blockquote><p>JavaScript并不具有动态作用域，它只是词法作用域，但是this机制某种程度上很像动态作用域。</p></blockquote><h2 id="作用域嵌套" tabindex="-1">作用域嵌套 <a class="header-anchor" href="#作用域嵌套" aria-label="Permalink to &quot;作用域嵌套&quot;">​</a></h2><p>在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层作用域（也就是全局作用域）为止。</p><p>作用域查找会在找到第一个匹配的标识符时停止。</p><p>在多层嵌套作用域中可以定义同名的标识符，这叫做“遮蔽效应”（内部的标识符遮蔽了外部的标识符）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小帅&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小美&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p><p>全局变量会自动成为全局对象（window）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过全局对象属性的引用来对其进行访问</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>变量的赋值操作会执行两个动作</p><ul><li>首先，编译器会在当前作用域中声明一个变量（如果之前没有声明过）；</li><li>在运行时，引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</li></ul>`,15),p=[e];function t(h,r,k,d,c,o){return i(),a("div",null,p)}const b=s(l,[["render",t]]);export{u as __pageData,b as default};
