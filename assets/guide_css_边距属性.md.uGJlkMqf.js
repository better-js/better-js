import{_ as i,c as s,o as a,V as l}from"./chunks/framework.YnO4XY28.js";const c=JSON.parse('{"title":"边距属性","description":"","frontmatter":{},"headers":[],"relativePath":"guide/css/边距属性.md","filePath":"guide/css/边距属性.md","lastUpdated":1732283740000}'),t={name:"guide/css/边距属性.md"},n=l(`<h1 id="边距属性" tabindex="-1">边距属性 <a class="header-anchor" href="#边距属性" aria-label="Permalink to &quot;边距属性&quot;">​</a></h1><h2 id="内边距" tabindex="-1">内边距 <a class="header-anchor" href="#内边距" aria-label="Permalink to &quot;内边距&quot;">​</a></h2><ul><li><p>内边距：边框与内容区域之间的距离。</p><table><thead><tr><th>取值</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>一个值</td><td>padding: num px;</td><td>上下左右</td></tr><tr><td>两个值</td><td>padding: num px num px;</td><td>上下、左右</td></tr><tr><td>三个值</td><td>padding: num px num px num px;</td><td>上、左右、下</td></tr><tr><td>四个值</td><td>padding: num px num px num px num px;</td><td>上、右、下、左</td></tr></tbody></table><ul><li>padding-top 设置上内边距</li><li>padding-bottom 设置下内边距</li><li>padding-left 设置左内边距</li><li>padding-right 设置右内边距</li></ul></li><li><p>内边距会影响盒子实际大小</p><ul><li><p>盒子内容大小(width/height) + 内边距(padding) + 边框(border)</p></li><li><p>当我们给盒子指定 padding 值之后，发生了 2 件事情：</p><ul><li><p>内容和边框有了距离，添加了内边距。</p></li><li><p>padding影响了盒子实际大小。</p><ul><li><p>如果盒子已经有了宽度和高度，此时再指定padding，会撑大盒子。</p></li><li><p>如何盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小。</p></li><li><p>Google盒模型:盒子真正的大小就是盒子内容(width/height)的大小</p></li></ul></li></ul></li><li><p>解决方案：</p><ul><li><p>如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p></li><li><p><strong>盒子内减属性（CSS3盒子模型，加了border和padding，不需要手动减去，浏览器会自动计算多余大小，自动在内容中减去）</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>应用：</p><ul><li>通过设置左右内边距，实现导航栏文字间隔相同。</li></ul></li></ul></li></ul><h2 id="外边距" tabindex="-1">外边距 <a class="header-anchor" href="#外边距" aria-label="Permalink to &quot;外边距&quot;">​</a></h2><ul><li><p>外边距：边框以外，盒子与盒子之间的距离。</p><table><thead><tr><th>取值</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>一个值</td><td>margin: num px;</td><td>上下左右</td></tr><tr><td>两个值</td><td>margin: num px num px;</td><td>上下、左右</td></tr><tr><td>三个值</td><td>margin: num px num px num px;</td><td>上、左右、下</td></tr><tr><td>四个值</td><td>margin: num px num px num px;</td><td>上、右、下、左</td></tr></tbody></table><ul><li>margin-top 设置上外边距</li><li>margin-bottom 设置下外边距</li><li>margin-left 设置左外边距</li><li>margin-right 设置右外边距</li></ul></li><li><p>版心居中</p><ul><li><p>外边距可以让块级盒子水平居中的两个条件:</p><ul><li>盒子必须指定了宽度(width)。</li><li>盒子左右的外边距都设置为 auto 。</li></ul></li><li><p>常见的写法，以下三种都可以:</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto; </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">margin: auto;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">margin: 0 auto;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>注意:以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</li></ul></li></ul></li><li><p>垂直布局块元素外边距折叠现象</p><ul><li><p>外边距合并现象</p><ul><li><p>垂直布局的块级元素，给上面盒子设置margin-bottom，给下面的盒子设置margin-top，两者的上下外边距会自动合并，最终的距离为两者中的最大值。</p></li><li><p>解决方案:</p><ul><li>可以避免，尽量只给一个盒子添加 margin 值。</li></ul></li></ul></li><li><p>外边距塌陷现象</p><ul><li><p>互相嵌套的块级元素，子元素的margin-top会作用在父元素上，导致父元素一起向下移动；如果父元素也有margin-top，此时父元素会塌陷较大的外边距值。</p></li><li><p>解决方案:</p><ul><li>可以为父元素设置border-top或者paddind-top（分隔父子元素的margin-top）。</li><li>可以为父元素添加 overflow:hidden，超出部分隐藏。</li><li>转为行内块元素</li><li>设置浮动</li></ul></li></ul></li></ul></li><li><p>清除内外边距</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 清除内边距 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 清除外边距 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>注意： <ul><li>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级元素、行内块元素或者设置行高line-height就可以了。</li></ul></li></ul></li></ul>`,5),p=[n];function e(d,r,h,u,o,g){return a(),s("div",null,p)}const m=i(t,[["render",e]]);export{c as __pageData,m as default};
