import{_ as s,c as a,o as i,V as n}from"./chunks/framework.__fMkWnK.js";const E=JSON.parse('{"title":"类","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/this/类.md","filePath":"guide/javascript/es/this/类.md","lastUpdated":1732283740000}'),p={name:"guide/javascript/es/this/类.md"},e=n(`<h1 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h1><blockquote><p>类是属于构造函数的</p><p>类名首字母要大写</p></blockquote><p>面向类的设计模式：</p><ul><li><p>实例化</p></li><li><p>继承：继承意味着复制操作，JavaScript默认并不会复制对象的属性。相反，JavaScript会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。</p><ul><li>原型继承</li><li>差异继承</li></ul></li><li><p>多态：父类通用行为可以被子类用更特殊的行为重写。</p></li></ul><p>可以使用类对数据结构进行分类，可以把任意数据结构看作范围更广的定义的一种特例。</p><p>ES6新增了 class 关键字，那是不是意味着 JavaScript 中实际上有类了呢？简单来说，不是。</p><p>类是一种设计模式，所以可以用一些方法近似实现类的功能。</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><p>类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。这个方法的任务就是初始化实例需要的所有信息（状态）。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;say&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// say</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="类的继承" tabindex="-1">类的继承 <a class="header-anchor" href="#类的继承" aria-label="Permalink to &quot;类的继承&quot;">​</a></h2><blockquote><p>类的继承其实就是复制，子类得到的只是父类的一份副本。</p></blockquote><p>super：从子类的构造函数中国呢通过 super 可以直接调用父类的构造函数。</p><p>由于 JavaScript 中父类和子类的关系只存在于两者构造函数对应的 <code>.prototype</code> 对象中，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用（在 ES6 的类中可以通过 super 来解决这个问题）。</p><h2 id="混入" tabindex="-1">混入 <a class="header-anchor" href="#混入" aria-label="Permalink to &quot;混入&quot;">​</a></h2><blockquote><p>混入实现继承</p></blockquote><p>在继承或者实例化时，JavaScript并不会自动执行复制行为。简单来说，JavaScript中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来。</p><p>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入。</p><p><strong>对象只能复制引用</strong></p>`,19),l=[e];function t(r,h,k,o,c,d){return i(),a("div",null,l)}const b=s(p,[["render",t]]);export{E as __pageData,b as default};
