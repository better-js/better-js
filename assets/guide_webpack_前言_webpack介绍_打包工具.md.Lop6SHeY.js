import{_ as a,c as s,o as i,V as e}from"./chunks/framework.YnO4XY28.js";const u=JSON.parse('{"title":"打包工具","description":"","frontmatter":{},"headers":[],"relativePath":"guide/webpack/前言/webpack介绍/打包工具.md","filePath":"guide/webpack/前言/webpack介绍/打包工具.md","lastUpdated":1732283740000}'),t={name:"guide/webpack/前言/webpack介绍/打包工具.md"},p=e('<h1 id="打包工具" tabindex="-1">打包工具 <a class="header-anchor" href="#打包工具" aria-label="Permalink to &quot;打包工具&quot;">​</a></h1><h2 id="为什么需要打包工具" tabindex="-1">为什么需要打包工具 <a class="header-anchor" href="#为什么需要打包工具" aria-label="Permalink to &quot;为什么需要打包工具&quot;">​</a></h2><p>在现代前端开发中，我们经常使用各种高级语法和框架来提高开发效率，如Vue、React等框架、ES6模块化语法，以及Less/Sass等css预处理器。然而，这些高级语法和框架在浏览器中并不能直接运行，若想要在浏览器中运行就必须编译成浏览器能够识别的JS、CSS代码。</p><p>所以这个时候打包工具就诞生了，它的主要作用就是将我们的源代码转换为浏览器能够识别运行的代码，这个过程通常包括编译（如babel将ES6转换为ES5）、打包（将多个文件合并为一个或几个文件）、压缩（减小文件大小）、做兼容性处理（如postCSS处理CSS的兼容性问题）等步骤。</p><p>通过打包工具，我们可以将复杂的开发环境和生产环境进行分离，使得开发者可以专注于代码的编写，而不需要关心代码的运行环境和性能优化等问题，大大提高了开发效率。同时打包工具还能提升代码的运行性能，提供更好的用户体验。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你的JavaScript代码是直接运行在浏览器中的，那么在JavaScript代码中是不能直接引入npm包的。因为浏览器并不支持Node.js的模块系统，也就是说浏览器不能直接理解 <code>require</code> 和 <code>import</code> 这样的模块引入语句。这就是为什么我们在开发前端项目时，通常会使用webpack等打包工具，将我们的源代码和npm包一起编译打包，生成浏览器可以识别的js代码。</p><p>在Node.js环境中，我们可以使用CommonJS规范来引入npm包，例如</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将引入moment这个npm包，并将其赋值给moment变量，然后我们就可以在代码中使用moment变量来调用该包中的函数和方法了。</p><p>在使用打包工具的项目中，我们可以使用ES6模块化语法来引入npm包，例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;moment&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h2 id="有哪些打包工具" tabindex="-1">有哪些打包工具 <a class="header-anchor" href="#有哪些打包工具" aria-label="Permalink to &quot;有哪些打包工具&quot;">​</a></h2><ul><li>Grunt</li><li>Gulp</li><li>Parcel</li><li>Webpack</li><li>Rollup</li><li>Vite</li></ul>',8),n=[p];function l(r,o,c,d,h,k){return i(),s("div",null,n)}const b=a(t,[["render",l]]);export{u as __pageData,b as default};
