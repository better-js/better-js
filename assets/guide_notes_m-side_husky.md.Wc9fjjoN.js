import{_ as s,c as a,o as i,V as e}from"./chunks/framework.__fMkWnK.js";const g=JSON.parse('{"title":"Husky","description":"","frontmatter":{},"headers":[],"relativePath":"guide/notes/m-side/husky.md","filePath":"guide/notes/m-side/husky.md","lastUpdated":1733155339000}'),n={name:"guide/notes/m-side/husky.md"},t=e(`<h1 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h1><p><a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">Husky</a> 是一个非常有用的工具，它允许我们在 Git 的生命周期中设置钩子（hooks），以便在代码提交（commit）或推送（push）之前自动执行一些脚本或命令。这可以帮助我们确保代码在提交到版本控制系统之前符合一定的标准，比如代码风格和代码质量。</p><p>为了确保所有开发者都遵循代码格式化规范，我们可以利用 Husky 设置一个 <code>pre-commit</code> 钩子，这样每当开发者提交代码时，都会自动触发代码格式化。</p><hr><p><strong>步骤 1：安装 Husky</strong></p><p>在项目中安装 Husky：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add --save-dev husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>步骤 2：初始化 Husky</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个 .husky 目录并设置默认的 pre-commit 钩子</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky-init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><p><strong>步骤 3：安装和配置 lint-staged</strong></p><p>lint-staged 是一个在 Git 暂存文件上运行 linters 的工具，与 Husky 结合使用，可以只对暂存区的文件运行 lint。</p><p>通常我们会结合 <code>lint-staged</code> 使用 <code>husky</code>，以便只对暂存区的文件运行 lint。</p><p>安装 <code>lint-staged</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add -D lint-staged</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 <code>package.json</code> 中配置 lint-staged：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;*.{ts,vue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>更新 <code>pre-commit</code> 钩子以使用 lint-staged：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky add .husky/pre-commit &quot;npx lint-staged&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>步骤 4：使用 Husky 自动格式化代码</strong></p><p>为了确保所有开发者遵循代码格式化规范，我们可以设置 Husky 的 <code>pre-commit</code> 钩子来自动格式化代码：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky add .husky/pre-commit &quot;pnpm run format&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>添加新钩子</summary><p>如果你想添加其它类型的钩子，比如 <code>pre-push</code>，可以使用 Husky 命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky add ./husky/pre-push &quot;pnpm run lint&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></details>`,25),p=[t];function l(d,h,r,o,c,u){return i(),a("div",null,p)}const m=s(n,[["render",l]]);export{g as __pageData,m as default};
