import{_ as s,c as i,o as a,V as n}from"./chunks/framework.__fMkWnK.js";const u=JSON.parse('{"title":"类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/数据类型/类型转换.md","filePath":"guide/javascript/es/数据类型/类型转换.md","lastUpdated":1732283740000}'),l={name:"guide/javascript/es/数据类型/类型转换.md"},e=n(`<h1 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h1><p>JavaScript 是一种动态类型语言 (dynamically typed language)。这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。</p><p><strong>那么为什么需要类型转换呢？</strong></p><ul><li><p>使用表单、prompt 获取过来的数据默认是字符串类型的，不能直接简单的进行加法运算，此时需要转换变量的数据类型。</p></li><li><p>类型转换就是把一种数据类型的变量转换成我们需要的数据类型。</p></li></ul><h3 id="显示类型" tabindex="-1">显示类型 <a class="header-anchor" href="#显示类型" aria-label="Permalink to &quot;显示类型&quot;">​</a></h3><ul><li>编写程序时过度依赖系统内部的隐式转换是不严谨的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。</li><li>为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</li><li>概念：自己写代码告诉系统该转成什么类型。</li></ul><h4 id="转换为数字型" tabindex="-1">转换为数字型 <a class="header-anchor" href="#转换为数字型" aria-label="Permalink to &quot;转换为数字型&quot;">​</a></h4><p>字符串转数字</p><p><strong>parseInt()</strong></p><p><code>parseInt</code> 方法只能返回整数，所以使用它会丢失小数部分。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转整数，且开头必须为正负号或者数字开头，且是连续的数字，如果遇到非数字则停止。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+50000axcds123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//+50000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>parseFloat()</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以保留小数，经常用于过滤单位（只能识别数字开头的）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转小数，注意科学记数法e。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开头必须为正负号或者数字开头，且是连续的数字，遇到第一个小数点，向后检测，如果后面是连续的数字则转出，如果遇到非数字或者第二个小数点则停止。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.14&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3e2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//300</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Number()</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只有包含纯数字的字符串能被转换出具体的数字，否则结果是NaN.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN也是number类型的数据，代表非数字。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="转换为字符型" tabindex="-1">转换为字符型 <a class="header-anchor" href="#转换为字符型" aria-label="Permalink to &quot;转换为字符型&quot;">​</a></h4><p>数字转字符串</p><p>在包含的数字和字符串的表达式中使用<strong>加法运算符（+）</strong>，JavaScript 会把数字转换成字符串。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><strong>String()</strong></p></li><li><p><strong>变量.toString()</strong></p></li><li><p>数据 + &#39; &#39;</p></li><li><p><strong><code>null</code> 和 <code>undefined</code> 都不能使用 <code>.toString()</code> 转字符串</strong></p><ul><li>数字转字符串要放在 <strong>括号</strong> 里，例如：(123).toString()</li></ul></li></ul><br><h4 id="转换为布尔型" tabindex="-1">转换为布尔型 <a class="header-anchor" href="#转换为布尔型" aria-label="Permalink to &quot;转换为布尔型&quot;">​</a></h4><ul><li><strong>Boolean()</strong></li></ul><br><h4 id="有6个值当false来看的" tabindex="-1">有6个值当false来看的 <a class="header-anchor" href="#有6个值当false来看的" aria-label="Permalink to &quot;有6个值当false来看的&quot;">​</a></h4><table><thead><tr><th>数据类型</th><th>转换成布尔值</th></tr></thead><tbody><tr><td>undefined</td><td>false</td></tr><tr><td>null</td><td>false</td></tr><tr><td>0</td><td>false</td></tr><tr><td>NaN</td><td>false</td></tr><tr><td>false</td><td>false</td></tr><tr><td>&#39; &#39;</td><td>false</td></tr></tbody></table><h3 id="隐式类型" tabindex="-1">隐式类型 <a class="header-anchor" href="#隐式类型" aria-label="Permalink to &quot;隐式类型&quot;">​</a></h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><h4 id="转换规则" tabindex="-1">转换规则 <a class="header-anchor" href="#转换规则" aria-label="Permalink to &quot;转换规则&quot;">​</a></h4><ul><li><p><code>+</code> 号两边只要有一个是字符串，都会把另外一个转成字符串</p></li><li><p>除了<code>+</code> 以外的算术运算符 比如 <code>-</code> <code>*</code> <code>/</code> 等都会把数据转成数字类型</p></li><li><p>在没有字符串类型的前提下，其他类型使用 <code>+</code> 也会存在一些隐式转换</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、数字 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 字符串 ：将数字转换为字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、数字 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean ：将 boolean 转换为 number类型</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、数字 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ：结果为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，NaN的类型为 number</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean ：将boolean 转换为 字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、boolean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean ：都转换成number在做相加运算</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p><strong>console.log(1 + true)</strong> //2</p><ul><li>将数字类型转换为布尔类型 只有true 或者 false</li><li>把布尔类型 true 或者 false 转为数字类型的话，true转为1，false转为0</li></ul></li><li><p><strong>console.log(1 + null)</strong> //null转为0</p></li><li><p><strong>console.log(1 + undefined)</strong> //undefined是NaN</p></li><li><p>缺点：</p><ul><li>转换类型不明确，靠经验才能总结</li></ul></li><li><p>小技巧：</p><ul><li>+号作为正号解析可以转换成Number</li></ul></li></ul></li></ul>`,30),t=[e];function p(h,r,d,k,o,c){return a(),i("div",null,t)}const E=s(l,[["render",p]]);export{u as __pageData,E as default};
