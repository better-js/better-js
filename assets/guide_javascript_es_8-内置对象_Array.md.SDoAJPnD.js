import{_ as a,c as r,o as t,V as e}from"./chunks/framework.YnO4XY28.js";const k=JSON.parse('{"title":"Array实例方法","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/8-内置对象/Array.md","filePath":"guide/javascript/es/8-内置对象/Array.md","lastUpdated":1732283740000}'),o={name:"guide/javascript/es/8-内置对象/Array.md"},p=e(`<h1 id="array实例方法" tabindex="-1">Array实例方法 <a class="header-anchor" href="#array实例方法" aria-label="Permalink to &quot;Array实例方法&quot;">​</a></h1><h2 id="array-prototype-at" tabindex="-1">Array.prototype.at() <a class="header-anchor" href="#array-prototype-at" aria-label="Permalink to &quot;Array.prototype.at()&quot;">​</a></h2><blockquote><p><strong><code>at(index)</code> 方法返回数组中指定索引对应的元素</strong></p></blockquote><p><strong>参数</strong></p><ul><li>index</li></ul><p><strong>返回值</strong></p><ul><li>指定索引对应的值</li></ul><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取arr数组中下标为2的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="array-prototype-concat" tabindex="-1">Array.prototype.concat() <a class="header-anchor" href="#array-prototype-concat" aria-label="Permalink to &quot;Array.prototype.concat()&quot;">​</a></h2><h2 id="array-prototype-copywithin" tabindex="-1">Array.prototype.copyWithin() <a class="header-anchor" href="#array-prototype-copywithin" aria-label="Permalink to &quot;Array.prototype.copyWithin()&quot;">​</a></h2><h2 id="array-prototype-entries" tabindex="-1">Array.prototype.entries() <a class="header-anchor" href="#array-prototype-entries" aria-label="Permalink to &quot;Array.prototype.entries()&quot;">​</a></h2><h2 id="array-prototype-every" tabindex="-1">Array.prototype.every() <a class="header-anchor" href="#array-prototype-every" aria-label="Permalink to &quot;Array.prototype.every()&quot;">​</a></h2><blockquote><p>会一直运行直到回调函数返回false（或者假值），遇到特殊返回值会提前终止遍历</p></blockquote><h2 id="array-prototype-fill" tabindex="-1">Array.prototype.fill() <a class="header-anchor" href="#array-prototype-fill" aria-label="Permalink to &quot;Array.prototype.fill()&quot;">​</a></h2><h2 id="array-prototype-filter" tabindex="-1">Array.prototype.filter() <a class="header-anchor" href="#array-prototype-filter" aria-label="Permalink to &quot;Array.prototype.filter()&quot;">​</a></h2><h2 id="array-prototype-find" tabindex="-1">Array.prototype.find() <a class="header-anchor" href="#array-prototype-find" aria-label="Permalink to &quot;Array.prototype.find()&quot;">​</a></h2><h2 id="array-prototype-findindex" tabindex="-1">Array.prototype.findIndex() <a class="header-anchor" href="#array-prototype-findindex" aria-label="Permalink to &quot;Array.prototype.findIndex()&quot;">​</a></h2><h2 id="array-prototype-findlast" tabindex="-1">Array.prototype.findLast() <a class="header-anchor" href="#array-prototype-findlast" aria-label="Permalink to &quot;Array.prototype.findLast()&quot;">​</a></h2><h2 id="array-prototype-findlastindex" tabindex="-1">Array.prototype.findLastIndex() <a class="header-anchor" href="#array-prototype-findlastindex" aria-label="Permalink to &quot;Array.prototype.findLastIndex()&quot;">​</a></h2><h2 id="array-prototype-flat" tabindex="-1">Array.prototype.flat() <a class="header-anchor" href="#array-prototype-flat" aria-label="Permalink to &quot;Array.prototype.flat()&quot;">​</a></h2><h2 id="array-prototype-flatmap" tabindex="-1">Array.prototype.flatMap() <a class="header-anchor" href="#array-prototype-flatmap" aria-label="Permalink to &quot;Array.prototype.flatMap()&quot;">​</a></h2><h2 id="array-prototype-foreach" tabindex="-1">Array.prototype.forEach() <a class="header-anchor" href="#array-prototype-foreach" aria-label="Permalink to &quot;Array.prototype.forEach()&quot;">​</a></h2><blockquote><p>会遍历数组中所有值并忽略回调函数的返回值</p></blockquote><h2 id="array-prototype-includes" tabindex="-1">Array.prototype.includes() <a class="header-anchor" href="#array-prototype-includes" aria-label="Permalink to &quot;Array.prototype.includes()&quot;">​</a></h2><h2 id="array-prototype-indexof" tabindex="-1">Array.prototype.indexOf() <a class="header-anchor" href="#array-prototype-indexof" aria-label="Permalink to &quot;Array.prototype.indexOf()&quot;">​</a></h2><h2 id="array-prototype-join" tabindex="-1">Array.prototype.join() <a class="header-anchor" href="#array-prototype-join" aria-label="Permalink to &quot;Array.prototype.join()&quot;">​</a></h2><h2 id="array-prototype-keys" tabindex="-1">Array.prototype.keys() <a class="header-anchor" href="#array-prototype-keys" aria-label="Permalink to &quot;Array.prototype.keys()&quot;">​</a></h2><h2 id="array-prototype-lastindexof" tabindex="-1">Array.prototype.lastIndexOf() <a class="header-anchor" href="#array-prototype-lastindexof" aria-label="Permalink to &quot;Array.prototype.lastIndexOf()&quot;">​</a></h2><h2 id="array-prototype-map" tabindex="-1">Array.prototype.map() <a class="header-anchor" href="#array-prototype-map" aria-label="Permalink to &quot;Array.prototype.map()&quot;">​</a></h2><h2 id="array-prototype-pop" tabindex="-1">Array.prototype.pop() <a class="header-anchor" href="#array-prototype-pop" aria-label="Permalink to &quot;Array.prototype.pop()&quot;">​</a></h2><h2 id="array-prototype-push" tabindex="-1">Array.prototype.push() <a class="header-anchor" href="#array-prototype-push" aria-label="Permalink to &quot;Array.prototype.push()&quot;">​</a></h2><h2 id="array-prototype-reduce" tabindex="-1">Array.prototype.reduce() <a class="header-anchor" href="#array-prototype-reduce" aria-label="Permalink to &quot;Array.prototype.reduce()&quot;">​</a></h2><h2 id="array-prototype-reduceright" tabindex="-1">Array.prototype.reduceRight() <a class="header-anchor" href="#array-prototype-reduceright" aria-label="Permalink to &quot;Array.prototype.reduceRight()&quot;">​</a></h2><h2 id="array-prototype-reverse" tabindex="-1">Array.prototype.reverse() <a class="header-anchor" href="#array-prototype-reverse" aria-label="Permalink to &quot;Array.prototype.reverse()&quot;">​</a></h2><h2 id="array-prototype-toreversed" tabindex="-1">Array.prototype.toReversed() <a class="header-anchor" href="#array-prototype-toreversed" aria-label="Permalink to &quot;Array.prototype.toReversed()&quot;">​</a></h2><h2 id="array-prototype-shift" tabindex="-1">Array.prototype.shift() <a class="header-anchor" href="#array-prototype-shift" aria-label="Permalink to &quot;Array.prototype.shift()&quot;">​</a></h2><h2 id="array-prototype-slice" tabindex="-1">Array.prototype.slice() <a class="header-anchor" href="#array-prototype-slice" aria-label="Permalink to &quot;Array.prototype.slice()&quot;">​</a></h2><h2 id="array-prototype-some" tabindex="-1">Array.prototype.some() <a class="header-anchor" href="#array-prototype-some" aria-label="Permalink to &quot;Array.prototype.some()&quot;">​</a></h2><blockquote><p>会一直运行直到回调函数返回 true（或者真值），遇到特殊返回值会提前终止遍历</p></blockquote><h2 id="array-prototype-sort" tabindex="-1">Array.prototype.sort() <a class="header-anchor" href="#array-prototype-sort" aria-label="Permalink to &quot;Array.prototype.sort()&quot;">​</a></h2><h2 id="array-prototype-tosorted" tabindex="-1">Array.prototype.toSorted() <a class="header-anchor" href="#array-prototype-tosorted" aria-label="Permalink to &quot;Array.prototype.toSorted()&quot;">​</a></h2><h2 id="array-prototype-splice" tabindex="-1">Array.prototype.splice() <a class="header-anchor" href="#array-prototype-splice" aria-label="Permalink to &quot;Array.prototype.splice()&quot;">​</a></h2><h2 id="array-prototype-tospliced" tabindex="-1">Array.prototype.toSpliced() <a class="header-anchor" href="#array-prototype-tospliced" aria-label="Permalink to &quot;Array.prototype.toSpliced()&quot;">​</a></h2><h2 id="array-prototype-tolocalestring" tabindex="-1">Array.prototype.toLocaleString() <a class="header-anchor" href="#array-prototype-tolocalestring" aria-label="Permalink to &quot;Array.prototype.toLocaleString()&quot;">​</a></h2><h2 id="array-prototype-tostring" tabindex="-1">Array.prototype.toString() <a class="header-anchor" href="#array-prototype-tostring" aria-label="Permalink to &quot;Array.prototype.toString()&quot;">​</a></h2><h2 id="array-prototype-unshift" tabindex="-1">Array.prototype.unshift() <a class="header-anchor" href="#array-prototype-unshift" aria-label="Permalink to &quot;Array.prototype.unshift()&quot;">​</a></h2><h2 id="array-prototype-values" tabindex="-1">Array.prototype.values() <a class="header-anchor" href="#array-prototype-values" aria-label="Permalink to &quot;Array.prototype.values()&quot;">​</a></h2><h2 id="array-prototype-with" tabindex="-1">Array.prototype.with() <a class="header-anchor" href="#array-prototype-with" aria-label="Permalink to &quot;Array.prototype.with()&quot;">​</a></h2>`,49),i=[p];function y(s,l,h,n,d,c){return t(),r("div",null,i)}const b=a(o,[["render",y]]);export{k as __pageData,b as default};
