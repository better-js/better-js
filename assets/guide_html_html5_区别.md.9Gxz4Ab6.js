import{_ as s,c as n,o as a,V as p}from"./chunks/framework.YnO4XY28.js";const g=JSON.parse('{"title":"区别","description":"","frontmatter":{},"headers":[],"relativePath":"guide/html/html5/区别.md","filePath":"guide/html/html5/区别.md","lastUpdated":1732283740000}'),e={name:"guide/html/html5/区别.md"},l=p(`<h1 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h1><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>不同点：</span></span>
<span class="line"><span>1，与服务器之间的通信：</span></span>
<span class="line"><span>cookie在浏览器与服务器之间来回传递，每次都会携带在HTTP头中，作用是与服务器进行交互，作为http规范的一部分而存在的，如果使用cookie保存过多数据会带来性能问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>localstorage和sessionstorage不参与和服务器间的通信，不会把数据发给服务器，仅在本地保存，存储在本地的数据可以直接获取 ，web Storage仅仅是为了在本地“存储”数据而生</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2，作用域的不同：</span></span>
<span class="line"><span>localStorage在所有同源窗口中都是共享的，同浏览器无法共享local和session的信息，同浏览器下，local可以在不同页面 (指的是相同域名和端口的下的不同页面) 共享相同的local数据，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面，不同页面或标签页间无法共享sessionStorage的信息，需要注意页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cookie也是在所有同源窗口中都是共享的，cookie在不设置过期时间的前提下，只在当前的会话有效，</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3，存储大小：</span></span>
<span class="line"><span>cookie存储大小为4k</span></span>
<span class="line"><span>localStorage和sessionStorage的存储数据大小一般都是：5MB</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4，存储内容类型：</span></span>
<span class="line"><span>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</span></span>
<span class="line"><span>会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5，应用场景：</span></span>
<span class="line"><span>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据</span></span>
<span class="line"><span>sessionStorage：敏感账号一次性登录</span></span>
<span class="line"><span>cookie的作用：主要用于保存登录信息，设置“每次请求都要携带的信息（最典型的就是身份认证信息）”就特别适合放在cookie中                                                                            </span></span>
<span class="line"><span></span></span>
<span class="line"><span>6，获取速度：</span></span>
<span class="line"><span>local和session存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快，cookie每次请求都会传送到服务器，数据获取交互相对慢些</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7，安全性：</span></span>
<span class="line"><span>WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8，失效时间：</span></span>
<span class="line"><span>cookie：一般默认是浏览器关闭失效,cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就会消失，这种生命期为浏览器会话期的cookie被称为会话，cookie可以自己设置失效时间,设置时间后只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭也不会影响。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>localstorage：永久有效，除非主动删除数据，否则永远也不会过期</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sessionstorage：当前会话有效，在关闭页面或浏览器后被清除,sessionStorage对象存储特定于某个会话的数据,也就是该数据只保持到浏览器关闭，sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>9：存储方法的调用</span></span>
<span class="line"><span>web storage拥有setItem,getItem,removeItem,clear等方法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>相同点：</span></span>
<span class="line"><span>都是保存在浏览器端、且同源的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>`,2),i=[l];function r(c,o,b,t,m,u){return a(),n("div",null,i)}const _=s(e,[["render",r]]);export{g as __pageData,_ as default};
