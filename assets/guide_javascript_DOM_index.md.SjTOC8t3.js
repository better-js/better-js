import{_ as s,c as i,o as a,V as l}from"./chunks/framework.__fMkWnK.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/DOM/index.md","filePath":"guide/javascript/DOM/index.md","lastUpdated":1732283740000}'),n={name:"guide/javascript/DOM/index.md"},e=l(`<p>Web API是浏览器提供的一套操作<strong>浏览器功能</strong>和<strong>页面元素</strong>的<strong>API</strong>（BOM和DOM）</p><h3 id="_1-1-作用和分类" tabindex="-1">1.1 作用和分类 <a class="header-anchor" href="#_1-1-作用和分类" aria-label="Permalink to &quot;1.1 作用和分类&quot;">​</a></h3><ul><li>作用: 就是使用 JS 去操作 html 和浏览器</li><li>分类：DOM (文档对象模型)、BOM（浏览器对象模型）</li></ul><h3 id="_1-2-什么是dom" tabindex="-1">1.2 什么是DOM <a class="header-anchor" href="#_1-2-什么是dom" aria-label="Permalink to &quot;1.2 什么是DOM&quot;">​</a></h3><ul><li>DOM（Document Object Model——文档对象模型）是用来呈现以及与任意 HTML 或 XML文档交互的API</li><li>白话文：DOM是浏览器提供的一套专门用来操作网页内容的功能</li><li>DOM作用：开发网页内容特效和实现用户交互</li></ul><h3 id="_1-3-dom树" tabindex="-1">1.3 DOM树 <a class="header-anchor" href="#_1-3-dom树" aria-label="Permalink to &quot;1.3 DOM树&quot;">​</a></h3><ul><li>DOM树是什么 <ul><li>将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树</li><li>描述网页内容关系的名词</li><li>作用： <ul><li>文档树直观的体现了标签与标签之间的关系</li></ul></li></ul></li></ul><h3 id="_1-4-dom对象-重要" tabindex="-1">1.4 DOM对象（重要） <a class="header-anchor" href="#_1-4-dom对象-重要" aria-label="Permalink to &quot;1.4 DOM对象（重要）&quot;">​</a></h3><ul><li><p>DOM对象：浏览器根据html标签生成的 JS对象</p><ul><li>所有的标签属性都可以在这个对象上面找到</li><li>修改这个对象的属性会自动映射到标签身上</li></ul></li><li><p>DOM的核心思想</p><ul><li>把网页内容当做对象来处理</li></ul></li><li><p>document 对象</p><ul><li><p>是 DOM 里提供的一个对象</p><ul><li><p>所以它提供的属性和方法都是用来访问和操作网页内容的</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>网页所有内容都在document里面</p></li></ul></li></ul></li></ul><p>我们在DOM里面里面通常就是做这样的三件事</p><ul><li>获取DOM元素</li><li>注册事件</li><li>实现效果</li></ul><h2 id="【1】获取元素" tabindex="-1">【1】获取元素 <a class="header-anchor" href="#【1】获取元素" aria-label="Permalink to &quot;【1】获取元素&quot;">​</a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="【4】元素样式" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E3%80%904%E3%80%91%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F" target="_blank" rel="noreferrer">#</a>【4】元素样式 <a class="header-anchor" href="#【4】元素样式" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#【4】元素样式)【4】元素样式&quot;">​</a></h2><h3 id="获取样式" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E8%8E%B7%E5%8F%96%E6%A0%B7%E5%BC%8F" target="_blank" rel="noreferrer">#</a>获取样式 <a class="header-anchor" href="#获取样式" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#获取样式)获取样式&quot;">​</a></h3><h3 id="style" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#style" target="_blank" rel="noreferrer">#</a>style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#style)style&quot;">​</a></h3><p>通过 style 属性操作CSS----------产生的是行内样式，css权重比较高</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对象.style.样式属性 = 值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>注意：</p><ul><li>修改样式通过style属性引出</li><li>如果属性有-连接符，需要转换为小驼峰命名法</li><li>赋值的时候，有单位的不要忘记加css单位</li><li>当对body赋值时，document.body.style.xxxx ，因为body全局就一个，可以直接使用</li></ul></li><li><p>举例说明：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;background-color: red;width: 300px;height: 100px; margin-top: 50px;&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;/div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	box.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;red&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	box.style.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;300px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  box.style.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;100px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	box.style.marginTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;50px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="classname" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#classname" target="_blank" rel="noreferrer">#</a>className <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#classname)className&quot;">​</a></h3><ul><li><p>通过类名(className) 操作CSS</p><p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">元素.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;类名&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>注意： <ul><li>由于class是关键字, 所以使用className去代替</li><li>className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名，可以采用多类名的方式。</li></ul></li><li>使用className的好处是可以同时修改多个样式。</li><li>使用className的注意事项是直接使用className赋值会覆盖以前的类名。</li></ul></li></ul><h3 id="classlist" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#classlist" target="_blank" rel="noreferrer">#</a>classList <a class="header-anchor" href="#classlist" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#classlist)classList&quot;">​</a></h3><ul><li><p>通过 classList 操作类控制CSS</p><p>为了解决className 容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//追加一个类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		元素.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;类名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除一个类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		元素.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;类名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//切换一个类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		元素.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;类名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>className和classList的区别 <ul><li>className会覆盖以前的类名</li><li>classList是追加和删除不影响以前类名</li></ul></li></ul></li></ul><h4 id="_4-3-设置-修改表单元素属性" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_4-3-%E8%AE%BE%E7%BD%AE-%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">#</a>4.3 设置/修改表单元素属性 <a class="header-anchor" href="#_4-3-设置-修改表单元素属性" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_4-3-设置-修改表单元素属性)4.3 设置/修改表单元素属性&quot;">​</a></h4><ul><li><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p></li><li><p>正常的有属性有取值的，跟其他的标签属性没有任何区别</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOM对象.属性名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOM对象.属性名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 新值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//例如:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;用户名&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;password&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value 用于获取和设置表单元素的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 用于获取和设置input标签的类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>表单属性中添加就有效果，移除就没有效果，一律使用布尔值表示</p><ul><li>如果为true 代表添加了该属性</li><li>如果是false 代表移除了该属性</li><li>比如： <ul><li>disabled 表单是否禁用 （input）</li><li>checked 按钮是否选中（单选框、复选框）</li><li>selected 选项是否选中（下拉列表）</li></ul></li></ul></li></ul><h3 id="自定义属性" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">#</a>自定义属性 <a class="header-anchor" href="#自定义属性" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#自定义属性)自定义属性&quot;">​</a></h3><h2 id="定时器-间歇函数" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%AE%9A%E6%97%B6%E5%99%A8-%E9%97%B4%E6%AD%87%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">#</a>定时器-间歇函数 <a class="header-anchor" href="#定时器-间歇函数" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#定时器-间歇函数)定时器-间歇函数&quot;">​</a></h2><ul><li>网页中经常会需要一种功能：每隔一段时间需要自动执行一段代码，不需要我们手动去触发。</li><li>例如：网页中的倒计时</li><li>要实现这种需求，需要定时器函数</li><li>定时器函数有两种，一种是间歇函数，另一种是延时函数。</li></ul><h4 id="_5-1-开启定时器" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_5-1-%E5%BC%80%E5%90%AF%E5%AE%9A%E6%97%B6%E5%99%A8" target="_blank" rel="noreferrer">#</a>5.1 开启定时器 <a class="header-anchor" href="#_5-1-开启定时器" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_5-1-开启定时器)5.1 开启定时器&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(函数,间隔时间)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>作用：</p><ul><li>每隔一段时间调用这个函数，间隔时间单位是毫秒，函数一旦开始永不停歇，除非强行停止计时器。</li></ul></li><li><p>举例说明：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;前端程序员，就是头发多&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repeat,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>注意： <ul><li>调用的函数名字不需要加括号</li><li>定时器返回的是一个id数字</li></ul></li></ul></li></ul><h4 id="_5-2-关闭定时器" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_5-2-%E5%85%B3%E9%97%AD%E5%AE%9A%E6%97%B6%E5%99%A8" target="_blank" rel="noreferrer">#</a>5.2 关闭定时器 <a class="header-anchor" href="#_5-2-关闭定时器" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_5-2-关闭定时器)5.2 关闭定时器&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(函数，间隔时间)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(变量名)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>注意： <ul><li>函数名字不需要加括号</li><li>定时器返回的是一个id数字</li><li>一般不会刚创建就停止，而是满足一定条件再停止。</li></ul></li></ul><h2 id="事件" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">#</a>事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#事件)事件&quot;">​</a></h2><h4 id="_1-事件" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">#</a>1. 事件 <a class="header-anchor" href="#_1-事件" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-事件)1. 事件&quot;">​</a></h4><h5 id="_1-1-事件" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-1-%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">#</a>1.1 事件 <a class="header-anchor" href="#_1-1-事件" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-1-事件)1.1 事件&quot;">​</a></h5><ul><li><p>什么是事件？</p><ul><li>js使我们有能力创建动态页面，而事件是可以被js侦测到的行为</li><li>事件是在编程时系统内发生的动作或者发生的事情</li><li>比如：用户在网页上单击一个按钮</li></ul></li><li><p>什么是事件监听？</p><ul><li>就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为注册事件</li></ul></li><li><p>语法：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">元素.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;事件&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,要执行的函数)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>事件监听三要素：</p><ul><li><strong>事件源</strong>：哪个dom元素被事件触发了，要获取dom元素（谁触发了）</li><li><strong>事件类型</strong>：用什么方式触发，比如鼠标单击 click、鼠标经过 mouseover 等（用什么方式触发，点击还是鼠标经过等）</li><li><strong>事件处理程序</strong>：要做什么事（要做什么事情）</li></ul></li><li><p>举例说明：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取按钮元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//事件监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;按钮被点击了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>注意： <ul><li>事件类型要加引号，并且全小写</li><li>函数是点击之后再去执行，每次点击都会执行一次</li></ul></li></ul></li></ul><h5 id="_1-2-事件监听版本" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-2-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E7%89%88%E6%9C%AC" target="_blank" rel="noreferrer">#</a>1.2 事件监听版本 <a class="header-anchor" href="#_1-2-事件监听版本" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-2-事件监听版本)1.2 事件监听版本&quot;">​</a></h5><ul><li>DOM L0 <ul><li>事件源.on事件 = function()</li></ul></li><li>DOM L2 <ul><li>事件源.addEventListener(事件, 事件处理函数)</li></ul></li><li>发展史： <ul><li>DOM L0：是 DOM 的发展的第一个版本； L：level</li><li>DOM L1：DOM级别1 于1998年10月1日成为W3C推荐标准</li><li>DOM L2：使用addEventListener注册事件</li><li>DOM L3： DOM3级事件模块在DOM2级事件的基础上重新定义了这些事件，也添加了一些新事件类型。</li></ul></li></ul><h5 id="_1-3-事件类型" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-3-%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">#</a>1.3 事件类型 <a class="header-anchor" href="#_1-3-事件类型" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-3-事件类型)1.3 事件类型&quot;">​</a></h5><ul><li>鼠标事件：鼠标触发 <ul><li>click 鼠标点击</li><li>mouseenter 鼠标经过</li><li>mouseleave 鼠标离开</li><li>contextmenu 鼠标右键</li></ul></li><li>焦点事件：表单获得光标 <ul><li>focus 获得焦点</li><li>blur 失去焦点</li></ul></li><li>键盘事件：键盘触发 <ul><li>keydown 键盘按下触发</li><li>keyup 键盘抬起触发</li></ul></li><li>文本事件：表单输入触发 <ul><li>input 用户输入事件</li></ul></li></ul><h4 id="_2-高阶函数" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">#</a>2. 高阶函数 <a class="header-anchor" href="#_2-高阶函数" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-高阶函数)2. 高阶函数&quot;">​</a></h4><h5 id="_2-1-高阶函数" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-1-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">#</a>2.1 高阶函数 <a class="header-anchor" href="#_2-1-高阶函数" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-1-高阶函数)2.1 高阶函数&quot;">​</a></h5><ul><li><strong>高阶函数</strong>可以被简单理解为函数的高级应用，JavaScript中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用。 <ul><li>【值】就是 JavaScript 中的数据，如数值、字符串、布尔、对象等。</li></ul></li><li>函数表达式和普通函数并无本质上的区别： <ul><li>普通函数的声明与调用无顺序限制，推荐做法先声明再调用</li><li>函数表达式必须要先声明再调用</li></ul></li></ul><h5 id="_2-2-回调函数" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-2-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">#</a>2.2 回调函数 <a class="header-anchor" href="#_2-2-回调函数" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-2-回调函数)2.2 回调函数&quot;">​</a></h5><ul><li><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数</p><ul><li>简单理解： 把一个函数当做参数来传递给另外一个函数的时候，这个函数就是回调函数</li><li>回调函数本质还是函数，只不过把它当成参数使用</li><li>使用匿名函数做为回调函数比较常见</li></ul></li><li><p>常见的使用场景：计时器和事件监听</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//计时器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我是回调函数…&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//fn传递给setInterval，fn就是回调函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h4 id="_3-环境变量" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_3-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" target="_blank" rel="noreferrer">#</a>3. 环境变量 <a class="header-anchor" href="#_3-环境变量" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_3-环境变量)3. 环境变量&quot;">​</a></h4><ul><li>环境对象指的是函数内部特殊的变量this，它代表着当前函数运行时所处的环境，this指事件函数的调用者。</li><li>作用： <ul><li>弄清楚this的指向，可以让我们代码更简洁</li></ul></li><li>函数的调用方式不同，this 指代的对象也不同</li><li><strong>谁调用，this 就是谁</strong>。是判断 this 指向的粗略规则</li><li>直接调用函数，其实相当于是 window.函数，所以 this 指代 window</li></ul><h4 id="_4-排他思想" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_4-%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3" target="_blank" rel="noreferrer">#</a>4. 排他思想 <a class="header-anchor" href="#_4-排他思想" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_4-排他思想)4. 排他思想&quot;">​</a></h4><ul><li>当前元素为A状态，其他元素为B状态</li><li>使用： <ul><li>干掉所有人 <ul><li>使用for循环</li></ul></li><li>复活他自己 <ul><li>通过this或者下标找到自己或者对应的元素</li></ul></li></ul></li></ul><h2 id="节点操作" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C" target="_blank" rel="noreferrer">#</a>节点操作 <a class="header-anchor" href="#节点操作" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#节点操作)节点操作&quot;">​</a></h2><p>为什么学节点操作</p><p>获取元素通常使用的两种方式：</p><ul><li>利用DOM提供的方法获取元素 <ul><li>document.getElementById()</li><li>document.getElementsByTagName()</li><li>document.querySelector()等</li><li>缺点：逻辑性不强、繁琐</li></ul></li><li>利用节点层级关系获取元素 <ul><li>利用父元素、子元素、兄弟元素获取元素</li><li>逻辑性强，但是兼容性差</li></ul></li></ul><p>什么是节点？</p><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM中，节点使用node来表示。</p><p>HTML DOM树中的所有节点均可通过 Javascript 进行访问，所有HTML元素（节点）均可被修改，也可以创建或删除。</p><p>节点概述</p><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性</p><ul><li>元素节点 nodeType 为 1</li><li>属性节点 nodeType 为 2</li><li>文本节点 nodeType 为 3（文本节点包含数字、空格、换行等）</li></ul><p>在实际开发中，节点操作主要操作的是元素节点</p><table><thead><tr><th>节点node</th><th>nodeType</th><th>nodeName</th><th>nodeValue</th></tr></thead><tbody><tr><td><strong>元素节点</strong></td><td>1</td><td>标签名（大写）</td><td>null</td></tr><tr><td><strong>属性节点</strong></td><td>2</td><td>属性名</td><td>属性值</td></tr><tr><td><strong>文本节点</strong></td><td>3</td><td>#text</td><td>文本内容</td></tr><tr><td>CDATA节点</td><td>4</td><td>#cdata-section</td><td>CDATA区域内容</td></tr><tr><td>实体引用名称节点</td><td>5</td><td>引用名称</td><td>null</td></tr><tr><td>实体名称节点</td><td>6</td><td>实体名称</td><td>null</td></tr><tr><td>处理指令节点</td><td>7</td><td>target</td><td>entire content cluding the target</td></tr><tr><td><strong>注释节点</strong></td><td>8</td><td>#comment</td><td>注释内容</td></tr><tr><td><strong>文档节点</strong></td><td>9</td><td>#document</td><td>null</td></tr><tr><td>文档类型节点</td><td>10</td><td>doctype的名称</td><td>null</td></tr><tr><td>文档片段节点</td><td>11</td><td>#document-fragment</td><td>null</td></tr><tr><td>DTD声明节点</td><td>12</td><td>符号名称</td><td>null</td></tr></tbody></table><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>节点的属性:(可以使用标签--元素.出来,可以使用属性节点.出来,文本节点.点出来)</span></span>
<span class="line"><span>nodeType:节点的类型</span></span>
<span class="line"><span>nodeName:节点的名字</span></span>
<span class="line"><span>nodeValue:节点的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="查找节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>查找节点 <a class="header-anchor" href="#查找节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#查找节点)查找节点&quot;">​</a></h3><ul><li>节点关系： <ul><li>父节点</li><li>子节点</li><li>兄弟节点</li></ul></li></ul><h4 id="查找父节点-属性" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9F%A5%E6%89%BE%E7%88%B6%E8%8A%82%E7%82%B9-%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">#</a>查找父节点（属性） <a class="header-anchor" href="#查找父节点-属性" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#查找父节点-属性)查找父节点（属性）&quot;">​</a></h4><ul><li>node.parentNode 获取某节点的父级节点 <ul><li>返回<strong>最近一级</strong>的父节点（亲爸爸） 如果找不到返回为null</li><li>通过子元素找父元素：子元素.<strong>parentNode</strong></li></ul></li><li>node.<strong>parentElement</strong> 获取某节点的父级元素(标签) <ul><li>由于一个元素只有一个父元素，所以两者达到的效果相同，但其实是不同的，具体参照查找子节点。</li></ul></li></ul><h4 id="查找子节点-属性" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9F%A5%E6%89%BE%E5%AD%90%E8%8A%82%E7%82%B9-%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">#</a>查找子节点（属性） <a class="header-anchor" href="#查找子节点-属性" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#查找子节点-属性)查找子节点（属性）&quot;">​</a></h4><ul><li><p>parentNode.<strong>childNodes</strong> 获取某父节点的子节点【标准】</p><ul><li><p>获得所有子节点、包括文本节点（空格、换行）、注释节点等</p></li><li><p>是一个即时更新的集合</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul.childNodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul.childNodes[i].nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	//1 是元素节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul.childNodes[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li><li><p>parentNode.<strong>children</strong> 获取某父节点的子元素(标签) 【非标准，实际开发的写法】（重点）</p><ul><li>仅获得所有元素节点</li><li>返回的还是一个伪数组 <ul><li>获取第一个元素 <code>parentNode.children[0]</code></li><li>获取最后一个元素 <code>parentNode.children[parentNode.children.length - 1]</code></li></ul></li><li>通过父元素查找子元素：父元素.children</li></ul></li><li><p>parentNode.firstChild</p><ul><li>firstChild返回第一个<strong>子节点</strong>，找不到则返回null。同样也是包含所有的节点（文本节点、元素节点）</li></ul></li><li><p>parentNode.lastChild</p><ul><li>lastChild返回最后一个<strong>子节点</strong>，找不到则返回null。同样也是包含所有的节点（文本节点、元素节点）</li></ul></li><li><p><strong>parentNode.firstElementChild</strong> 【 有兼容性问题，ieE9以上才支持 】</p><ul><li>返回第一个子元素节点，找不到则返回null</li></ul></li><li><p><strong>parentNode.lastElementChild</strong> 【 有兼容性问题，ieE9以上才支持 】</p><ul><li>返回最后一个子元素节点，找不到则返回null</li></ul></li></ul><h4 id="查找兄弟节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9F%A5%E6%89%BE%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>查找兄弟节点 <a class="header-anchor" href="#查找兄弟节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#查找兄弟节点)查找兄弟节点&quot;">​</a></h4><ul><li><p>下一个兄弟元素节点 【 有兼容性问题，ieE9以上才支持 】</p><ul><li><strong>node.nextElementSibling</strong></li><li>返回当前元素的下一个兄弟节点，找不到则返回null</li></ul></li><li><p>上一个兄弟元素节点 【 有兼容性问题，ieE9以上才支持 】</p><ul><li><p><strong>node.previousElementSibling</strong></p></li><li><p>返回当前元素的上一个兄弟节点，找不到则返回null</p></li><li><p>解决方案（封装一个兼容性函数）</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNextElementSibling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.nextSibling){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el.nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li></ul><h4 id="查找属性节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9F%A5%E6%89%BE%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>查找属性节点： <a class="header-anchor" href="#查找属性节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#查找属性节点)查找属性节点：&quot;">​</a></h4><ul><li><p>node.<strong>getAttributeNode</strong>(&quot;name&quot;)</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;su&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;苏东旭&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let dv = document.querySelector(&#39;div&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(dv.getAttributeNode(&#39;name&#39;))   //name=&quot;su&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="增加节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%A2%9E%E5%8A%A0%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>增加节点 <a class="header-anchor" href="#增加节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#增加节点)增加节点&quot;">​</a></h3><ul><li>很多情况下，我们需要在页面中增加元素 <ul><li>比如，点击发布按钮，可以新增一条信息</li></ul></li><li>一般情况下，我们新增节点，按照如下操作： <ul><li>创建一个新的节点</li><li>把创建的新的节点放入到指定的元素内部</li></ul></li></ul><h4 id="创建节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>创建节点 <a class="header-anchor" href="#创建节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#创建节点)创建节点&quot;">​</a></h4><ul><li><p>即创造出一个新的网页元素，再添加到网页内，一般先创建节点，然后插入节点</p></li><li><p>创建元素节点方法：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;标签名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="追加节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E8%BF%BD%E5%8A%A0%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>追加节点 <a class="header-anchor" href="#追加节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#追加节点)追加节点&quot;">​</a></h4><ul><li><p>要想在界面看到，还得插入到某个父元素中</p></li><li><p>插入到父元素的最后一个子元素:</p><ul><li><p>父元素.appendChild(子元素)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(li)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>插入到父元素中某个子元素的前面</p><ul><li><p>父元素.insertBefore(子元素,在哪个元素前面)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(li,ul.children[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h4 id="克隆节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%85%8B%E9%9A%86%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>克隆节点 <a class="header-anchor" href="#克隆节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#克隆节点)克隆节点&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">元素.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cloneNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(布尔值)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>特殊情况下，我们新增节点，按照如下操作： <ul><li>复制一个原有的节点</li><li>把复制的节点放入到指定的元素内部</li></ul></li><li>cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值 <ul><li>若为true，则代表克隆时会包含后代节点一起克隆</li><li>若为false，则代表克隆时不包含后代节点</li><li>默认为false</li></ul></li></ul><h4 id="删除节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>删除节点 <a class="header-anchor" href="#删除节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#删除节点)删除节点&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父元素.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(要删除的元素)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>若一个节点在页面中已不需要时，可以删除它</li><li>在 JavaScript 原生DOM操作中，要删除元素必须通过父元素删除</li><li>注： <ul><li>如不存在父子关系则删除不成功</li><li>删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从html中删除节点</li></ul></li></ul><h4 id="替换节点" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%9B%BF%E6%8D%A2%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">#</a>替换节点 <a class="header-anchor" href="#替换节点" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#替换节点)替换节点&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parentNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(新节点,当前节点)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>用新节点替换当前节点</li></ul><h2 id="事件高级" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7" target="_blank" rel="noreferrer">#</a>事件高级 <a class="header-anchor" href="#事件高级" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#事件高级)事件高级&quot;">​</a></h2><h4 id="_1-事件对象" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">#</a>1. 事件对象 <a class="header-anchor" href="#_1-事件对象" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_1-事件对象)1. 事件对象&quot;">​</a></h4><ul><li><p>获取事件对象</p><ul><li><p>事件对象是什么</p><ul><li>也是个对象，这个对象里有事件触发时的相关信息</li><li>例如：鼠标点击事件中，事件对象就存了鼠标点在哪个位置等信息</li></ul></li><li><p>如何获取</p><ul><li><p>在事件绑定的回调函数的第一个参数就是事件对象</p></li><li><p>一般命名为event、ev、e 事件对象</p></li><li><p>例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">元素.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.event </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 兼容IE8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><p>部分常用属性</p><ul><li>type <ul><li>获取当前的事件类型</li></ul></li><li>clientX/clientY <ul><li>以浏览器显示窗口左上顶角为原点，定位(x,y)坐标</li></ul></li><li>offsetX/offsetY <ul><li>以当前事件的目标对象左上角为原点，定位(x,,y)坐标</li></ul></li><li>pageX/pageY <ul><li>以document对象（即文本窗口）左上角为原点，定位(x,y)坐标</li></ul></li><li>target <ul><li>返回触发此事件的元素（事件的目标节点）</li></ul></li><li>key <ul><li>用户按下的键盘键的值</li><li>现在不提倡使用keyCode</li></ul></li></ul></li></ul></li></ul><h4 id="_2-事件流" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-%E4%BA%8B%E4%BB%B6%E6%B5%81" target="_blank" rel="noreferrer">#</a>2. 事件流 <a class="header-anchor" href="#_2-事件流" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-事件流)2. 事件流&quot;">​</a></h4><h5 id="_2-1-事件流和两个阶段说明" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-1-%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%92%8C%E4%B8%A4%E4%B8%AA%E9%98%B6%E6%AE%B5%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">#</a>2.1 事件流和两个阶段说明 <a class="header-anchor" href="#_2-1-事件流和两个阶段说明" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-1-事件流和两个阶段说明)2.1 事件流和两个阶段说明&quot;">​</a></h5><ul><li>事件流指的是事件完整执行过程中的流动路径</li><li>说明：假设页面里有个div，当触发事件时，会经历两个阶段，分别是捕获阶段、冒泡阶段</li><li>简单来说：捕获阶段是 从父到子 冒泡阶段是从子到父</li></ul><h5 id="_2-2-事件捕获和事件冒泡" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-2-%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1" target="_blank" rel="noreferrer">#</a>2.2 事件捕获和事件冒泡 <a class="header-anchor" href="#_2-2-事件捕获和事件冒泡" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-2-事件捕获和事件冒泡)2.2 事件捕获和事件冒泡&quot;">​</a></h5><ul><li><p>事件捕获概念：</p><ul><li>从DOM的根元素开始去执行对应的事件 (从外到里)</li></ul></li><li><p>事件捕获需要写对应代码才能看到效果</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DOM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(事件类型, 事件处理函数, 是否使用捕获机制)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>说明： <ul><li>addEventListener第三个参数传入true代表是捕获阶段触发（很少使用）</li><li>若传入false代表冒泡阶段触发，默认就是false</li><li>若是用 L0 事件监听，则只有冒泡阶段，没有捕获</li></ul></li></ul></li><li><p>事件冒泡概念：</p><ul><li>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡。</li><li>简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的同名事件</li><li>事件冒泡是默认存在的</li></ul></li></ul><h5 id="_2-3-阻止事件流动" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-3-%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%8A%A8" target="_blank" rel="noreferrer">#</a>2.3 阻止事件流动 <a class="header-anchor" href="#_2-3-阻止事件流动" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-3-阻止事件流动)2.3 阻止事件流动&quot;">​</a></h5><ul><li><p>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</p></li><li><p>若想把事件就限制在当前元素内，就需要阻止事件流动</p></li><li><p>阻止事件流动需要拿到事件对象</p></li><li><p>语法：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//停止传播，不再派发事件，符合w3c标准，谷歌和火狐支持 IE8不支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.cancelBubble</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//确定取消冒泡，IE特有 居然没兼容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小苏同学&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	e. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>此方法可以阻断事件流动传播，不光在冒泡阶段有效，捕获阶段也有效</p></li><li><p>鼠标经过事件：</p><ul><li>mouseover 和 mouseout 会有冒泡效果</li><li>mouseenter 和 mouseleave 没有冒泡效果(推荐)</li></ul></li></ul><h5 id="_2-4-阻止默认行为" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-4-%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA" target="_blank" rel="noreferrer">#</a>2.4 阻止默认行为 <a class="header-anchor" href="#_2-4-阻止默认行为" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_2-4-阻止默认行为)2.4 阻止默认行为&quot;">​</a></h5><ul><li><p>比如链接点击不跳转，表单域的跳转</p></li><li><p>语法：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//三种方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//阻止默认 符合w3c标准 只有IE8不支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.returnValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//阻止默认行为 IE特有 火狐不支持(亲测支持)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>两种注册事件的区别：</p><ul><li><p>传统on注册（L0）</p><ul><li>同一个对象，后面注册的事件会覆盖前面注册(同一个事件)</li><li>直接使用null覆盖就可以实现事件的解绑</li><li>都是冒泡阶段执行的</li></ul></li><li><p>事件监听注册（L2）</p><ul><li><p>语法:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(事件类型, 事件处理函数, 是否使用捕获)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>后面注册的事件不会覆盖前面注册的事件(同一个事件)</p></li><li><p>可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p></li><li><p>必须使用removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</p></li><li><p>匿名函数无法被解绑</p></li></ul></li></ul></li></ul><h4 id="_3-事件委托" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_3-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98" target="_blank" rel="noreferrer">#</a>3. 事件委托 <a class="header-anchor" href="#_3-事件委托" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#_3-事件委托)3. 事件委托&quot;">​</a></h4><ul><li><p>事件委托是利用事件流的特征解决一些开发需求的知识技巧</p></li><li><p>又叫事件代理，原理就是利用事件冒泡的特点：当子元素的事件发生时，父元素的同名事件也会发生——指定一个事件处理程序，就可以管理某一类型的所有事件。</p></li><li><p>总结：</p><ul><li><p>优点：给父级元素加事件（可以提高性能）</p><ul><li>不用给列表的每一个元素绑定事件，只需要绑定父元素就可以处理所有子元素的事件，优化性能。</li></ul></li><li><p>原理：事件委托其实是利用事件冒泡的特点</p></li><li><p>实现：事件对象.target 可以获得真正触发事件的元素</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //获取触发冒泡事件的点击者（事件源）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li></ul><h2 id="网页特效" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88" target="_blank" rel="noreferrer">#</a>网页特效 <a class="header-anchor" href="#网页特效" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#网页特效)网页特效&quot;">​</a></h2><h3 id="滚动事件" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">#</a>滚动事件 <a class="header-anchor" href="#滚动事件" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#滚动事件)滚动事件&quot;">​</a></h3><ul><li><p>当页面进行滚动时触发的事件，滚动1像素即可触发。</p></li><li><p>为什么要学？</p><ul><li>很多网页需要检测用户把页面滚动到某个区域后做一些处理， 比如固定导航栏，比如返回顶部</li></ul></li><li><p>事件名：scroll</p></li><li><p>监听整个页面滚动：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//页面滚动事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给 window 或 document 添加 scroll 事件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>监听某个元素的内部滚动直接给某个元素加即可</p></li></ul><h3 id="加载事件" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%8A%A0%E8%BD%BD%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">#</a>加载事件 <a class="header-anchor" href="#加载事件" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#加载事件)加载事件&quot;">​</a></h3><ul><li><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p></li><li><p>为什么要学？</p><ul><li>有些时候需要等页面资源全部处理完了做一些事情</li><li>老代码喜欢把 script 写在 head 中，这时候直接找 dom 元素找不到</li><li>有了load事件，script可以写在任何位置，该事件等页面所有资源加载完毕再执行。</li></ul></li><li><p>事件名：load</p></li><li><p>监听页面所有资源加载完毕：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给 window 添加 load 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件</p></li><li><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像等完全加载</p></li><li><p>事件名：DOMContentLoaded</p></li><li><p>监听页面DOM加载完毕：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给 document 添加 DOMContentLoaded 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>注意：</p><ul><li>load事件监听整个页面资源，给window加</li><li>DOMContentLoaded事件给document加，当初始html文档被加载完和解析完成后被触发。</li></ul></li></ul><h3 id="元素大小和位置" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F%E5%92%8C%E4%BD%8D%E7%BD%AE" target="_blank" rel="noreferrer">#</a>元素大小和位置 <a class="header-anchor" href="#元素大小和位置" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#元素大小和位置)元素大小和位置&quot;">​</a></h3><h4 id="scroll家族-滚动" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#scroll%E5%AE%B6%E6%97%8F-%E6%BB%9A%E5%8A%A8" target="_blank" rel="noreferrer">#</a>scroll家族---滚动 <a class="header-anchor" href="#scroll家族-滚动" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#scroll家族-滚动)scroll家族---滚动&quot;">​</a></h4><ul><li><p>使用场景：</p><ul><li>我们想要页面滚动一段距离，比如100px，就让某些元素显示隐藏，那我们怎么知道，页面滚动了100像素呢？就可以使用scroll 来检测页面滚动的距离~~~</li></ul></li><li><p>获取宽高：</p><ul><li><p>获取元素的内容总宽高（不包含滚动条）返回值不带单位</p><ul><li><p>scrollWidth和scrollHeight</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(div.scrollWidth)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>代表获容器内部可滚动的宽度和高度（width/height + padding）</p></li><li><p>包括由于溢出而无法展示在网页的不可见部分</p></li></ul></li></ul></li><li><p>获取位置：</p><ul><li><p>获取元素内容往左、往上滚出去看不到的距离</p><ul><li><p>scrollLeft和scrollTop</p><ul><li><p>这两个属性是可以修改的，不仅可以获取数值，也可以赋值，但是不要带单位。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scrollTop)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>相对于父盒子，元素向上/向左 卷曲出去（滚出去）的距离</li></ul></li></ul></li></ul></li></ul></li><li><p>开发中，我们经常检测页面滚动的距离，比如页面滚动100像素，就可以显示一个元素，或者固定一个元素</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//获得当前页面被卷去的头部</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.scrollTop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>注意事项 <ul><li>document.documentElement HTML文档返回对象为HTML元素，documentElement是HTML的一种写法。</li></ul></li></ul></li></ul><h4 id="offset家族-偏移量" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#offset%E5%AE%B6%E6%97%8F-%E5%81%8F%E7%A7%BB%E9%87%8F" target="_blank" rel="noreferrer">#</a>offset家族---偏移量 <a class="header-anchor" href="#offset家族-偏移量" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#offset家族-偏移量)offset家族---偏移量&quot;">​</a></h4><ul><li>使用场景： <ul><li>前面案例滚动多少距离，都是我们自己算的，最好是页面滚动到某个元素，就可以做某些事。</li><li>简单说，就是通过js的方式，得到元素在页面中的位置</li><li>这样我们可以做，页面滚动到这个位置，就可以返回顶部的小盒子显示…</li></ul></li><li>获取宽高： <ul><li>获取元素的自身宽高、包含元素自身设置的宽高、padding、border <ul><li>offsetWidth和offsetHeight <ul><li>元素盒子模型的宽高</li></ul></li></ul></li></ul></li><li>获取位置： <ul><li>获取元素到距离自己最近的带有定位的父级元素的左、上距离（如果父级无定位，以浏览器窗口左上角为原点） <ul><li>offsetLeft和offsetTop 注意是只读属性</li></ul></li></ul></li><li>获取父元素 <ul><li>获取最近的一个相对父级元素（默认指向body） <ul><li>offsetParent</li></ul></li></ul></li></ul><h4 id="client家族" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#client%E5%AE%B6%E6%97%8F" target="_blank" rel="noreferrer">#</a>client家族 <a class="header-anchor" href="#client家族" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#client家族)client家族&quot;">​</a></h4><ul><li><p>获取宽高：</p><ul><li>获取元素的可见部分宽高（不包含边框，滚动条等） <ul><li>clientWidth 和 clientHeight</li></ul></li></ul></li><li><p>获取位置：</p><ul><li>获取左边框和上边框宽度（厚度） <ul><li>clientLeft 和 clientTop 注意是只读属性</li></ul></li></ul></li><li><p>会在窗口尺寸改变的时候触发事件：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//resize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>检测屏幕宽度：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h4 id="三者区别" tabindex="-1"><a href="https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">#</a>三者区别： <a class="header-anchor" href="#三者区别" aria-label="Permalink to &quot;[#](https://friday-js.github.io/guide/nodes/javascript/DOM/DOM.html#三者区别)三者区别：&quot;">​</a></h4><p>scrollWidth scrollHeight 内容宽高 offsetWidth offsetHeight 盒子元素的大小=盒子本身的宽度和高度+padding+border clientWidth clientHeight 当前可视区域的宽高（不包含滚动条，边框等）</p><p>scrollLeft scrollTop 获取元素内容往左、往上滚出去看不到的距离 offsetLeft offsetTop 获取元素到距离自己最近的带有定位的父级元素的左、上距离 clientLeft clientTop 获取左边框和上边框宽度（厚度）</p>`,118),t=[e];function p(h,r,d,k,u,o){return a(),i("div",null,t)}const g=s(n,[["render",p]]);export{c as __pageData,g as default};
