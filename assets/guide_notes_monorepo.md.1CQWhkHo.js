import{_ as s,c as a,o as i,V as e}from"./chunks/framework.YnO4XY28.js";const m=JSON.parse('{"title":"Monorepo架构","description":"","frontmatter":{},"headers":[],"relativePath":"guide/notes/monorepo.md","filePath":"guide/notes/monorepo.md","lastUpdated":1732358672000}'),n={name:"guide/notes/monorepo.md"},p=e(`<h1 id="monorepo架构" tabindex="-1">Monorepo架构 <a class="header-anchor" href="#monorepo架构" aria-label="Permalink to &quot;Monorepo架构&quot;">​</a></h1><p>Monorepo 是一种代码库管理策略，即在一个单一的代码库（repository）中管理多个项目/包（package）。这种方法与传统的每个项目一个代码库（multi-repo）相对。</p><p>使用 Monorepo 可以带来一些好处，如更好的代码共享和依赖管理、一致的开发环境、统一的CI/CD流程等。</p><h2 id="pnpm-搭建-monorepo-环境" tabindex="-1">pnpm 搭建 monorepo 环境 <a class="header-anchor" href="#pnpm-搭建-monorepo-环境" aria-label="Permalink to &quot;pnpm 搭建 monorepo 环境&quot;">​</a></h2><p>使用 <code>pnpm</code> 来管理 <code>monorepo</code> 项目是一种高效的方法，<code>pnpm</code> 提供了工作空间（workspace）功能，可以帮助你在一个代码库中管理多个包。以下是如何使用 <code>pnpm</code> 实现 <code>monorepo</code> 的详细步骤：</p><h3 id="_1-初始化项目" tabindex="-1">（1）初始化项目 <a class="header-anchor" href="#_1-初始化项目" aria-label="Permalink to &quot;（1）初始化项目&quot;">​</a></h3><p>首先，确保你已经安装了 <code>pnpm</code>。如果还没有安装，可以使用以下命令进行安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install pnpm -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，初始化你的 <code>monorepo</code> 项目：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-monorepo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-munorepo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-创建-pnpm-workspace-yaml" tabindex="-1">（2）创建 <code>pnpm-workspace.yaml</code> <a class="header-anchor" href="#_2-创建-pnpm-workspace-yaml" aria-label="Permalink to &quot;（2）创建 \`pnpm-workspace.yaml\`&quot;">​</a></h3><p>在项目根目录下创建一个 <code>pnpm-workspace.yaml</code> 文件，用于定义哪些目录包含工作空间包：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-创建包" tabindex="-1">（3）创建包 <a class="header-anchor" href="#_3-创建包" aria-label="Permalink to &quot;（3）创建包&quot;">​</a></h3><p>在使用 monorepo 管理多个项目时，通常需要在根目录下创建一个名为 <code>packages</code> 的目录，这个目录用于存放所有的子项目，每个子项目都是 <code>packages</code> 下的一个子目录。这种结构有助于统一管理依赖和配置，同时也便于各个子项目之间相互引用和协作。</p><p>例如，创建两个子包 <code>package-a</code> 和 <code>package-b</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/package-a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/package-b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后再每个目录下初始化 <code>package.json</code> 文件</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/package-a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../package-b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-添加依赖" tabindex="-1">（4）添加依赖 <a class="header-anchor" href="#_4-添加依赖" aria-label="Permalink to &quot;（4）添加依赖&quot;">​</a></h3><p><strong>安装公共依赖</strong></p><p>如果你希望将依赖安装到工作区的根目录（node_modules）下，共享给所有子包使用，需要在安装的命令中添加 <code>-w</code> 或者 <code>--workspace-root</code> 标志来显示指定：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>安装非公共依赖</strong></p><p>如果某个依赖仅用于特定的子包，而不是整个工作区的公共依赖，应该在子包的目录下安装。每个子包有自己的 <code>package.json</code> 文件和依赖配置</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/package-a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果子包b依赖于子包a，可以在子包b中添加子包a作为依赖：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/package-b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add package-a --workspace</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5-运行和构建" tabindex="-1">（5）运行和构建 <a class="header-anchor" href="#_5-运行和构建" aria-label="Permalink to &quot;（5）运行和构建&quot;">​</a></h3><p>开发使用 esbuild</p><p>生产使用 rollup</p>`,31),l=[p];function t(h,r,o,d,c,k){return i(),a("div",null,l)}const b=s(n,[["render",t]]);export{m as __pageData,b as default};
