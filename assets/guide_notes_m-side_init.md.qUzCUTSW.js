import{_ as s,c as n,o as a,V as e}from"./chunks/framework.__fMkWnK.js";const h=JSON.parse('{"title":"项目初始化","description":"","frontmatter":{},"headers":[],"relativePath":"guide/notes/m-side/init.md","filePath":"guide/notes/m-side/init.md","lastUpdated":1733754322000}'),p={name:"guide/notes/m-side/init.md"},i=e(`<h1 id="项目初始化" tabindex="-1">项目初始化 <a class="header-anchor" href="#项目初始化" aria-label="Permalink to &quot;项目初始化&quot;">​</a></h1><p>在初始化项目时，我们并没有选择<a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">create-vue</a>提供的一键式项目创建方式，而是选择了使用<a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>从零开始创建项目。这样做的目的是为了能够更深入地理解项目的创建过程，虽然这种方法可能需要更多的初始设置工作，但它使我们能够获得对项目结构和配置的更深层次理解，从而在未来的开发和维护中更加得心应手。</p><hr><p><strong>步骤 1：初始化项目</strong></p><p>使用 Vite 初始化新项目，运行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create vite</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>步骤 2：设置项目结构</strong></p><p>以下是推荐的项目结构，它有助于保持代码的组织性和可维护性：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├─ public</span></span>
<span class="line"><span>├─ src</span></span>
<span class="line"><span>│  ├─ assets             // 静态资源</span></span>
<span class="line"><span>│  ├─ components         // 公共组件</span></span>
<span class="line"><span>│  ├─ views              // 页面组件</span></span>
<span class="line"><span>│  ├─ router             // 路由配置</span></span>
<span class="line"><span>│  ├─ store              // 状态管理</span></span>
<span class="line"><span>│  ├─ utils              // 工具函数</span></span>
<span class="line"><span>│  ├─ App.vue            // 根组件</span></span>
<span class="line"><span>│  └─ main.js            // 入口文件</span></span>
<span class="line"><span>├─ index.html</span></span>
<span class="line"><span>├─ package.json</span></span>
<span class="line"><span>├─ README.md</span></span>
<span class="line"><span>├─ tsconfig.app.json</span></span>
<span class="line"><span>├─ tsconfig.json</span></span>
<span class="line"><span>├─ tsconfig.node.json</span></span>
<span class="line"><span>└─ vite.config.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过这种方式，你可以构建一个结构清晰、易于管理的 Vue 项目。虽然手动设置项目结构需要一些额外的时间和精力，但它为你提供了对项目构建过程的完全控制，使你能够根据项目需求定制构建配置。</p>`,11),l=[i];function r(t,c,o,b,d,u){return a(),n("div",null,l)}const g=s(p,[["render",r]]);export{h as __pageData,g as default};
