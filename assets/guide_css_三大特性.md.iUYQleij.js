import{_ as a,E as i,c as d,m as t,a as o,J as c,w as s,V as l,o as n}from"./chunks/framework.YnO4XY28.js";const S=JSON.parse('{"title":"三大特性","description":"","frontmatter":{},"headers":[],"relativePath":"guide/css/三大特性.md","filePath":"guide/css/三大特性.md","lastUpdated":1732283740000}'),r={name:"guide/css/三大特性.md"},p=l('<h1 id="三大特性" tabindex="-1">三大特性 <a class="header-anchor" href="#三大特性" aria-label="Permalink to &quot;三大特性&quot;">​</a></h1><h2 id="层叠性" tabindex="-1">层叠性 <a class="header-anchor" href="#层叠性" aria-label="Permalink to &quot;层叠性&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">概念</p><p>给同一个标签设置相同的样式，此时样式会层叠覆盖，只有写在最后的样式会生效（遵循的原则是<strong>就近原则</strong>）。</p></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p><strong>当样式冲突时，只有当选择器的优先级相同时，才能通过层叠性判断结果。</strong></p></div><h2 id="继承性" tabindex="-1">继承性 <a class="header-anchor" href="#继承性" aria-label="Permalink to &quot;继承性&quot;">​</a></h2>',5),_={class:"tip custom-block"},u=t("p",{class:"custom-block-title"},"概念",-1),m={class:"tip custom-block"},h=t("p",{class:"custom-block-title"},"规则",-1),b=l('<div class="tip custom-block"><p class="custom-block-title">常见的可继承属性</p><p><strong>text-</strong>，<strong>font-</strong>，<strong>line-<strong>这些元素开头的可以继承,以及</strong>color</strong>属性</p><blockquote><p>恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p></blockquote></div><div class="warning custom-block"><p class="custom-block-title">继承失效的特殊情况</p><p>如果元素有浏览器默认样式，此时继承性依然存在，但是优先显示浏览器的默认样式。</p><ul><li><p>a标签的color会继承失效</p><p>color属性被浏览器默认设置的样式给覆盖了</p></li><li><p>h系列标签的font-size会继承失效</p><p>font-size属性被浏览器默认设置的样式给覆盖了</p></li><li><p>div的高度不能继承，但是宽度有类似于继承的效果</p><p>宽度属性不能被继承，但是div有独占一行的特性</p></li></ul></div><h2 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">优先级特性</p><p>不同的选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低的选择器样式。</p><p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>ID选择器</code> &gt; <code>类选择器</code> &gt; <code>元素选择器</code> &gt; <code>*</code> &gt; <code>继承的样式</code></p></div><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li><code>!important</code> 写在属性值的后面，分号的前面。</li><li><code>!important</code> 并不能提升继承的优先级，只要是继承，优先级就是最低的。</li><li>实际开发中不建议使用 <code>!important</code> 。</li></ul></div>',5);function g(k,f,v,T,q,x){const e=i("font");return n(),d("div",null,[p,t("div",_,[u,t("p",null,[o("元素会自动继承"),c(e,{color:"blue"},{default:s(()=>[o("其父元素")]),_:1}),o("，或"),c(e,{color:"blue"},{default:s(()=>[o("其祖先元素")]),_:1}),o("上所设置的"),c(e,{color:"blue"},{default:s(()=>[o("某些样式")]),_:1}),o("。")])]),t("div",m,[h,t("p",null,[o("优先继承"),c(e,{color:"blue"},{default:s(()=>[o("离得近")]),_:1}),o("的。")])]),b])}const V=a(r,[["render",g]]);export{S as __pageData,V as default};
