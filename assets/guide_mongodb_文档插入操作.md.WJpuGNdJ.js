import{_ as s,c as a,o as n,V as i}from"./chunks/framework.YnO4XY28.js";const b=JSON.parse('{"title":"插入文档","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mongodb/文档插入操作.md","filePath":"guide/mongodb/文档插入操作.md","lastUpdated":1733062151000}'),e={name:"guide/mongodb/文档插入操作.md"},l=i(`<h1 id="插入文档" tabindex="-1">插入文档 <a class="header-anchor" href="#插入文档" aria-label="Permalink to &quot;插入文档&quot;">​</a></h1><p>MongoDB 提供了两种将新文档插入到集合中的方法：<code>insertOne()</code> 和 <code>instertMany()</code>。如果集合当前不存在，插入操作会创建集合。</p><p>在 MongoDB 中插入操作针对的是单个集合。</p><h2 id="_1-插入单一文档" tabindex="-1">(1) 插入单一文档 <a class="header-anchor" href="#_1-插入单一文档" aria-label="Permalink to &quot;(1) 插入单一文档&quot;">​</a></h2><p>如果您想插入单个文档，可以使用 <code>db.collection.insertOne()</code> 方法，这个方法允许您将一个单独的文档添加到集合中。如果在文档中未指定 <code>_id</code> 字段，MongoDB会自动生成主键值。</p><div class="info custom-block"><p class="custom-block-title">例子</p><p>要将新文档插入到 <code>matu.users</code> 集合中：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> matu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db.users.insertOne(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dancy&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NumberInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		gender:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;man&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		hobby:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;coding&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><h2 id="_2-插入多个文档" tabindex="-1">(2) 插入多个文档 <a class="header-anchor" href="#_2-插入多个文档" aria-label="Permalink to &quot;(2) 插入多个文档&quot;">​</a></h2><p>如果您需要一次性插入多个文档，可以使用 <code>db.collection.insertMany()</code> 方法。这个方法接受一个文档数组，并将它们批量插入到集合中。如果在文档中未指定 <code>_id</code> 字段，MongoDB会自动生成主键值。</p><div class="info custom-block"><p class="custom-block-title">例子</p><p>要将两个新文档插入到 <code>matu.users</code> 集合中：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> matu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db.users.insertMany([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ZhangSan&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NumberInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		gener:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;man&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		hobby:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dance&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;LiSi&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NumberInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		gener:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;man&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		hobby:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;play games&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><p>当使用 MongoDB 进行批量插入数据时，如果其中某条数据插入失败，整个操作会停止，但已经成功插入的数据不会被回滚。为了更好地处理这种情况，您可以使用 <code>try...catch</code> 语句来捕获并处理异常。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文档插入操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} catch (e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 这里可以添加额外的错误处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;插入失败：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> + e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过这种方式，您可以更有效地管理和控制数据插入过程中可能出现的问题，确保数据的完整性和应用的健壮性。</p>`,12),p=[l];function t(h,k,r,d,c,o){return n(),a("div",null,p)}const u=s(e,[["render",t]]);export{b as __pageData,u as default};
