import{_ as s,c as i,o as e,V as a}from"./chunks/framework.YnO4XY28.js";const g=JSON.parse('{"title":"Promise的状态","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/14-网络请求/promise/promise的状态.md","filePath":"guide/javascript/es/14-网络请求/promise/promise的状态.md","lastUpdated":1732283740000}'),n={name:"guide/javascript/es/14-网络请求/promise/promise的状态.md"},p=a(`<h1 id="promise的状态" tabindex="-1">Promise的状态 <a class="header-anchor" href="#promise的状态" aria-label="Permalink to &quot;Promise的状态&quot;">​</a></h1><p>实例对象中的一个属性 <code>PromiseState</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Promise {&lt;pending&gt;}</span></span>
<span class="line"><span>▸[[Prototype]]: Promise</span></span>
<span class="line"><span> [[PromiseState]]: &quot;pending&quot;</span></span>
<span class="line"><span> [[PromiseResult]]: undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ul><li><em><strong>待定（pending）</strong></em>：初始状态，既没有被兑现，也没有被拒绝。</li><li><em><strong>已兑现（fulfilled）</strong></em>：意味着操作成功完成。</li><li><em><strong>已拒绝（rejected）</strong></em>：意味着操作失败。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pending变为fulfilled</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pending变为rejected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onFulfilled, onRejected)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onRejected);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>执行内部 <code>resove()</code> ：pending变为fulfilled</p></li><li><p>执行内部 <code>reject()</code> ：pending变为rejected</p></li></ul><blockquote><p>只有这两种，且一个Promise对象只能改变一次（要么成功，要么失败）</p><p>无论变为成功还是失败，都会有一个结果数据</p><p>成功结果数据一般称为value，失败的结果数据一般称为reason</p></blockquote>`,8),l=[p];function t(r,h,d,o,c,k){return e(),i("div",null,l)}const u=s(n,[["render",t]]);export{g as __pageData,u as default};
