import{_ as i,c as e,o,V as t}from"./chunks/framework.__fMkWnK.js";const _=JSON.parse('{"title":"基本概念","description":"","frontmatter":{},"headers":[],"relativePath":"guide/git/基本概念.md","filePath":"guide/git/基本概念.md","lastUpdated":1731852837000}'),l={name:"guide/git/基本概念.md"},d=t('<h1 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h1><h2 id="git的四个区域" tabindex="-1">Git的四个区域 <a class="header-anchor" href="#git的四个区域" aria-label="Permalink to &quot;Git的四个区域&quot;">​</a></h2><ul><li><p><code>工作区</code>（Working Directory）：也叫工作目录或本地工作目录，<strong>就是我们自己电脑上的 <code>.git</code> 所在的目录</strong>。</p></li><li><p><code>暂存区</code>（Stage Area/Index）：<strong>是一种临时存储区域，用于保存即将提交到Git仓库的修改内容</strong>，暂存区是在Git进行版本控制时非常重要的一个区域。一般存放在 <code>.git</code> 目录下的 index 文件，所以我们把暂存区有时也叫索引（index）。</p></li><li><p><code>本地仓库</code>（Local Repository）：通过 <code>git init</code> 命令创建的仓库，它包含了完整的项目历史和元数据，是<strong>Git存储代码和版本信息的主要位置</strong>。工作区有一个隐藏目录 <code>.git</code> ，这个不算工作区，而是Git的版本库。</p></li><li><p><code>远程仓库</code>（Remote Repository）：托管在远程服务器上的仓库。</p></li></ul><blockquote><p>本地仓库和远程仓库是两个仓库，它们之间是相互独立的。我们可以在本地仓库中做任何修改，但是这些仓库并不会影响到远程仓库，同样远程仓库的修改也不会影响到我们本地仓库。</p><p>因此，我们需要一种机制来同步本地仓库和远程仓库的修改内容，让它们的状态保持一致，那这个同步的过程就涉及到 Git 中两个新的命令 <code>push</code> 和 <code>pull</code>。这两个命令的含义和它们的名字一样，一个表示推送，一个表示拉取。</p><ul><li>push：把本地仓库的修改推送给远程仓库</li><li>pull：把远程仓库的修改拉取到本地仓库</li></ul></blockquote><h2 id="git的三种状态" tabindex="-1">Git的三种状态 <a class="header-anchor" href="#git的三种状态" aria-label="Permalink to &quot;Git的三种状态&quot;">​</a></h2><ul><li><code>已修改</code>（Modified）：修改了文件，但没保存到暂存区。</li><li><code>已暂存</code>（Staged）：把修改后的文件放在暂存区。</li><li><code>已提交</code>（Committed）：把暂存区的文件提交到本地仓库。</li></ul><h2 id="git文件的四种状态" tabindex="-1">Git文件的四种状态 <a class="header-anchor" href="#git文件的四种状态" aria-label="Permalink to &quot;Git文件的四种状态&quot;">​</a></h2><p>当我们的项目被git管理之后，它就不是一个单纯的项目了（项目中的文件都会被git所管理，每个文件都会被分配不同的状态）。</p><p>git中的文件有两种状态：<strong>未跟踪</strong> 和 <strong>已跟踪</strong>。</p><ul><li>未跟踪（Untrack）：新创建还没有被 Git 管理起来的文件</li><li>已跟踪（tracked）：指文件已被git所管理（进入监视列表） <ul><li>未修改（Unmodified）：已经被 Git 管理起来，但是文件的内容没有发生变化，还没有被修改过</li><li>已修改（Modified）：已经修改了文件，但是还没有添加到暂存区</li><li>已暂存（Staged）：修改过后，并且已经添加到了暂存区内的文件</li></ul></li></ul><h2 id="基本概念-1" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念-1" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li><code>main</code>：默认主分支</li><li><code>origin</code>：默认远程仓库</li><li><code>HEAD</code>：指向当前分支的指针</li><li><code>HEAD^</code>：上一个版本</li><li><code>HEAD~4</code>：上4个版本</li></ul><h2 id="特殊文件" tabindex="-1">特殊文件 <a class="header-anchor" href="#特殊文件" aria-label="Permalink to &quot;特殊文件&quot;">​</a></h2><ul><li><code>.git</code>：Git仓库的元数据和对象数据库</li><li><code>.gitignore</code>：忽略文件</li><li><code>.gitattributes</code>：指定文件的属性，比如换行符</li><li><code>.gitkeep</code>：使空目录被提交到仓库</li><li><code>.gitmodules</code>：记录子模块的信息</li></ul>',14),a=[d];function c(r,n,s,g,u,h){return o(),e("div",null,a)}const m=i(l,[["render",c]]);export{_ as __pageData,m as default};
