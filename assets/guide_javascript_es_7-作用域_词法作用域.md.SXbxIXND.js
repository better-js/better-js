import{_ as a,c as e,o as t,V as o}from"./chunks/framework.YnO4XY28.js";const b=JSON.parse('{"title":"词法作用域","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/7-作用域/词法作用域.md","filePath":"guide/javascript/es/7-作用域/词法作用域.md","lastUpdated":1732283740000}'),r={name:"guide/javascript/es/7-作用域/词法作用域.md"},i=o('<h1 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-label="Permalink to &quot;词法作用域&quot;">​</a></h1><p>词法作用域就是定义在<strong>词法阶段</strong>的作用域。是由书写代码时函数声明的位置来决定的。编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><p>换句话说：词法作用域就是有你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大多数情况下是这样的）</p><p><strong>无论函数在哪里调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</strong></p><p>词法作用域查找只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到这个变量后，对象属性访问规则会分别阶段对bar和baz属性的访问。</p><h2 id="欺骗词法" tabindex="-1">欺骗词法 <a class="header-anchor" href="#欺骗词法" aria-label="Permalink to &quot;欺骗词法&quot;">​</a></h2><blockquote><p>欺骗词法作用域会导致性能下降。</p></blockquote><p>JavaScript中有两种机制来实现这个目的：<code>eval()</code> 和 <code>with</code>。</p><h3 id="eval" tabindex="-1">eval() <a class="header-anchor" href="#eval" aria-label="Permalink to &quot;eval()&quot;">​</a></h3><p>在严格模式中，<code>eval()</code> 在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p><p>本质：对一段包含一个或多个声明的代码字符串进行演算，并借此来修改已经存在的词法作用域（在运行时）</p><h3 id="with" tabindex="-1">with <a class="header-anchor" href="#with" aria-label="Permalink to &quot;with&quot;">​</a></h3><p>本质：通过将一个对象的引用当作作用域处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域（在运行时）</p><p>这两个机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化时无效的。使用这其中任何一个机制都将导致代码变慢，不要使用它们。</p>',14),c=[i];function s(d,p,l,n,_,h){return t(),e("div",null,c)}const f=a(r,[["render",s]]);export{b as __pageData,f as default};
