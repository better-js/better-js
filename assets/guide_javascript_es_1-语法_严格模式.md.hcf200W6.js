import{_ as a,c as e,o as i,V as s}from"./chunks/framework.YnO4XY28.js";const m=JSON.parse('{"title":"严格模式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javascript/es/1-语法/严格模式.md","filePath":"guide/javascript/es/1-语法/严格模式.md","lastUpdated":1732283740000}'),l={name:"guide/javascript/es/1-语法/严格模式.md"},t=s(`<h1 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h1><p>在严格模式下，不能定义名为 eval 和 arguments 的变量，否则会导致语法错误。</p><h2 id="启用严格模式" tabindex="-1">启用严格模式 <a class="header-anchor" href="#启用严格模式" aria-label="Permalink to &quot;启用严格模式&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>&quot;use strict&quot;</code> 它是一个预处理命令，JavaScript引擎看到它会自动切换到严格模式。建议按一个个函数去开启严格模式</p></div><h3 id="_1-为脚本开启严格模式" tabindex="-1">1. 为脚本开启严格模式 <a class="header-anchor" href="#_1-为脚本开启严格模式" aria-label="Permalink to &quot;1. 为脚本开启严格模式&quot;">​</a></h3><p>把 <code>&quot;use strict&quot;</code> 声明一字不漏地放在脚本开头。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 整个脚本都开启严格模式的语法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-为函数开启严格模式" tabindex="-1">2. 为函数开启严格模式 <a class="header-anchor" href="#_2-为函数开启严格模式" aria-label="Permalink to &quot;2. 为函数开启严格模式&quot;">​</a></h3><p>把 <code>&quot;use strict&quot;</code> 声明一字不漏地放在函数体所有语句之前。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 函数级别严格模式语法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="严格模式中的变化" tabindex="-1">严格模式中的变化 <a class="header-anchor" href="#严格模式中的变化" aria-label="Permalink to &quot;严格模式中的变化&quot;">​</a></h2><h3 id="将过失错误转成异常" tabindex="-1">将过失错误转成异常 <a class="header-anchor" href="#将过失错误转成异常" aria-label="Permalink to &quot;将过失错误转成异常&quot;">​</a></h3><ul><li>严格模式下无法再意外创建全局变量。 <ul><li>在普通的 JavaScript 里面给一个错误命名的变量名赋值会使全局对象新增一个属性并继续“工作”。而在严格模式中意外创建全局变量则会抛出错误。</li></ul></li><li>严格模式会使引起静默失败 (silently fail，注：不报错也没有任何效果) 的赋值操作抛出异常。 <ul><li>任何在正常模式下引起静默失败的赋值操作 (给不可写属性赋值，给只读属性 (getter-only) 赋值，给不可扩展对象 (non-extensible object) 的新属性赋值) 都会抛出异常</li></ul></li><li>在严格模式下，试图删除不可删除的属性时会抛出异常 (之前这种操作不会产生任何效果)</li><li>严格模式要求一个对象内的所有属性名在对象内必须唯一。正常模式下重名属性是允许的，最后一个重名的属性决定其属性值。</li><li>严格模式要求函数的参数名唯一。在正常模式下，最后一个重名参数名会掩盖之前的重名参数。之前的参数仍然可以通过 <code>arguments[i]</code> 来访问, 还不是完全无法访问。然而，这种隐藏毫无意义而且可能是意料之外的 (比如它可能本来是打错了), 所以在严格模式下重名参数被认为是语法错误</li><li>严格模式禁止八进制数字语法。ECMAScript 并不包含八进制语法，但所有的浏览器都支持这种以零 (<code>0</code>) 开头的八进制语法：<code>0644 === 420</code> 还有 <code>&quot;\\045&quot; === &quot;%&quot;</code>.在 ECMAScript 6 中支持为一个数字加&quot;<code>0</code>o&quot;的前缀来表示八进制数。</li><li>ECMAScript 6 中的严格模式禁止设置<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noreferrer">primitive</a>值的属性。</li></ul><h3 id="简化变量的使用" tabindex="-1">简化变量的使用 <a class="header-anchor" href="#简化变量的使用" aria-label="Permalink to &quot;简化变量的使用&quot;">​</a></h3><ul><li>严格模式禁用 <code>with</code></li><li>严格模式下的 eval 不再为上层范围 (surrounding scope，注：包围 eval 代码块的范围) 引入新变量</li><li>严格模式禁止删除声明变量。</li></ul><h3 id="让eval和arguments变的简单" tabindex="-1">让eval和arguments变的简单 <a class="header-anchor" href="#让eval和arguments变的简单" aria-label="Permalink to &quot;让eval和arguments变的简单&quot;">​</a></h3><ul><li>名称 <code>eval</code> 和 <code>arguments</code> 不能通过程序语法被绑定 (be bound) 或赋值。</li><li>严格模式下，参数的值不会随 arguments 对象的值的改变而变化。</li><li>不再支持 <code>arguments.callee</code>。</li></ul><h3 id="安全的-javascript" tabindex="-1">&quot;安全的&quot; JavaScript <a class="header-anchor" href="#安全的-javascript" aria-label="Permalink to &quot;&quot;安全的&quot; JavaScript&quot;">​</a></h3><ul><li><p>在严格模式下通过<code>this</code>传递给一个函数的值不会被强制转换为一个对象。</p></li><li><p>在严格模式中再也不能通过广泛实现的 ECMAScript 扩展“游走于”JavaScript 的栈中。</p></li><li><p>严格模式下的<code>arguments</code>不会再提供访问与调用这个函数相关的变量的途径。</p></li></ul><h3 id="为未来的-ecmascript-版本铺平道路" tabindex="-1">为未来的 ECMAScript 版本铺平道路 <a class="header-anchor" href="#为未来的-ecmascript-版本铺平道路" aria-label="Permalink to &quot;为未来的 ECMAScript 版本铺平道路&quot;">​</a></h3><ul><li>在严格模式中一部分字符变成了保留的关键字。</li><li>严格模式禁止了不在脚本或者函数层面上的函数声明</li></ul>`,21),n=[t];function r(o,c,p,d,h,u){return i(),e("div",null,n)}const b=a(l,[["render",r]]);export{m as __pageData,b as default};
