import{_ as e,c as t,o as i,V as o}from"./chunks/framework.YnO4XY28.js";const m=JSON.parse('{"title":"响应式系统","description":"","frontmatter":{},"headers":[],"relativePath":"guide/vue-principle/响应式系统.md","filePath":"guide/vue-principle/响应式系统.md","lastUpdated":1732023681000}'),a={name:"guide/vue-principle/响应式系统.md"},p=o('<h1 id="响应式系统" tabindex="-1">响应式系统 <a class="header-anchor" href="#响应式系统" aria-label="Permalink to &quot;响应式系统&quot;">​</a></h1><p>在探讨响应式系统时，首先需要了解两个核心概念：<code>响应式数据</code> 和 <code>副作用函数</code>。</p><p><strong>响应式数据</strong></p><ul><li><p>在响应式系统中，数据的变化会自动通知依赖于这些数据的组件或函数，从而实现数据和视图的同步。</p></li><li><p>Vue3 采用 Proxy 实现响应式数据（Proxy可以拦截对数据的访问和修改，从而实现响应式功能）</p></li></ul><p><strong>副作用函数</strong></p><ul><li><p>在响应式系统中，副作用函数通常用来处理数据变化带来的更新需求。</p></li><li><p>在响应式系统中，副作用函数会自动追踪其依赖的响应式数据，当这些数据发生变化时，系统会自动重新执行这些副作用函数。</p></li><li><p>为了优化性能，响应式系统可能会对副作用函数进行防抖和节流处理，以减少不必要的执行次数。</p></li></ul>',6),r=[p];function _(l,c,n,s,d,u){return i(),t("div",null,r)}const f=e(a,[["render",_]]);export{m as __pageData,f as default};
