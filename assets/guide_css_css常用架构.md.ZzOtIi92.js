import{_ as a,c as e,o as s,V as l}from"./chunks/framework.YnO4XY28.js";const b=JSON.parse('{"title":"CSS常用架构","description":"","frontmatter":{},"headers":[],"relativePath":"guide/css/css常用架构.md","filePath":"guide/css/css常用架构.md","lastUpdated":1732283740000}'),t={name:"guide/css/css常用架构.md"},o=l('<h1 id="css常用架构" tabindex="-1">CSS常用架构 <a class="header-anchor" href="#css常用架构" aria-label="Permalink to &quot;CSS常用架构&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><h3 id="痛点" tabindex="-1">痛点 <a class="header-anchor" href="#痛点" aria-label="Permalink to &quot;痛点&quot;">​</a></h3><p>痛点：CSS设计之初是不需要，也没有考虑到这些问题的</p><ol><li>缺乏复用机制 <ul><li>解决方案：模块化（组件化）的设计模式（方法论）</li></ul></li><li>编写效率低 <ul><li>解决方案：预处理器、PostCSS</li></ul></li><li>没有局部作用域 <ul><li>解决方案：CSS Modules</li></ul></li></ol><h3 id="css的产生" tabindex="-1">CSS的产生 <a class="header-anchor" href="#css的产生" aria-label="Permalink to &quot;CSS的产生&quot;">​</a></h3><p>20世纪90年代，样式是写在HTML中的，样式嵌入在HTML中就导致HTML越来越大，越来越难以维护，所以就需要将样式从HTML中分离。</p><h3 id="css的定义" tabindex="-1">CSS的定义 <a class="header-anchor" href="#css的定义" aria-label="Permalink to &quot;CSS的定义&quot;">​</a></h3><p>CSS（Cascading Style Sheets，层叠样式表）</p><ol><li>是一门样式表语言，不是编程语言（编写效率低、难复用）</li><li>可层叠的样式声明（层叠规则复杂导致难预测）</li><li>全局作用域（容易命名冲突、难维护）</li></ol><h2 id="常见的css设计模式" tabindex="-1">常见的CSS设计模式 <a class="header-anchor" href="#常见的css设计模式" aria-label="Permalink to &quot;常见的CSS设计模式&quot;">​</a></h2><h3 id="oocss" tabindex="-1">OOCSS <a class="header-anchor" href="#oocss" aria-label="Permalink to &quot;OOCSS&quot;">​</a></h3><h3 id="bem" tabindex="-1">BEM <a class="header-anchor" href="#bem" aria-label="Permalink to &quot;BEM&quot;">​</a></h3><h3 id="smacss" tabindex="-1">SMACSS <a class="header-anchor" href="#smacss" aria-label="Permalink to &quot;SMACSS&quot;">​</a></h3><h3 id="functional-css" tabindex="-1">Functional CSS <a class="header-anchor" href="#functional-css" aria-label="Permalink to &quot;Functional CSS&quot;">​</a></h3><h2 id="预处理器和postcss" tabindex="-1">预处理器和PostCSS <a class="header-anchor" href="#预处理器和postcss" aria-label="Permalink to &quot;预处理器和PostCSS&quot;">​</a></h2><h2 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS Modules&quot;">​</a></h2><h2 id="css-in-js" tabindex="-1">CSS in JS <a class="header-anchor" href="#css-in-js" aria-label="Permalink to &quot;CSS in JS&quot;">​</a></h2>',18),i=[o];function r(c,h,n,d,S,u){return s(),e("div",null,i)}const m=a(t,[["render",r]]);export{b as __pageData,m as default};
