import{_ as e,c as i,o as a,V as l}from"./chunks/framework.__fMkWnK.js";const m=JSON.parse('{"title":"规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/git/规范.md","filePath":"guide/git/规范.md","lastUpdated":1731852837000}'),s={name:"guide/git/规范.md"},t=l(`<h1 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h1><h2 id="分支管理流程规范" tabindex="-1">分支管理流程规范 <a class="header-anchor" href="#分支管理流程规范" aria-label="Permalink to &quot;分支管理流程规范&quot;">​</a></h2><h3 id="gitflow-模型" tabindex="-1">GitFlow 模型 <a class="header-anchor" href="#gitflow-模型" aria-label="Permalink to &quot;GitFlow 模型&quot;">​</a></h3><p>适用于团队技术水平适中，有一定开发流程和规范的团队。</p><ul><li><code>master</code> / <code>main</code>：主线/基线分支 <ul><li>【核心分支】它包含了项目的最新稳定版本的代码，所以应该随时保证主线分支中的代码是可发布的。</li><li>一般来说主线分支的代码会被部署到生产环境中</li><li>主线分支中的代码是不允许直接修改的，只能通过合并分支的方式来修改（只接受来自 <code>hotfix</code> 和 <code>release</code> 的合并请求），每次合并分支都建议生成一个新的版本号，这样可以方便追踪和回溯，可以通过 <code>git tag</code> 命令来标记版本号。 <ul><li>版本号规则： <ul><li>主版本（Major Version）：主要的功能变化或重大更新</li><li>次版本（Minor Version）：一些新的功能、改进和更新，通常不会影响现有功能</li><li>修订版本（Patch Version）：一些小的bug修复，安全漏洞补丁等，通常不会更改现有功能和接口。</li></ul></li></ul></li></ul></li><li><code>hotfix</code>：线上版本bug热修复分支 <ul><li>【辅助分支】从main分支pull出来，用于解决线上问题，修复完成后合并回main分支和develop分支中</li><li>发布小版本，删除掉该分支。</li><li>命名规则：hotfix-#issueid-desc</li></ul></li><li><code>release</code>：预发布分支 <ul><li>【辅助分支】用于发布前的测试和验证</li><li>只提交测试过程中发现的 <code>BugFix</code> 内容</li><li>发布分支应该从开发分支派生，并在准备好发布版本后合并回主分支和开发分支。</li></ul></li><li><code>develop</code>：开发分支 <ul><li>【核心分支】用于日常开发，所有的功能分支、发布分支、修补分支都应该从开发分支派生出来。</li></ul></li><li><code>feature</code>：功能分支 <ul><li>【辅助分支】用于开发单独的功能或者特性。</li><li>每个功能分支都应该从开发分支派生，并在开发完成后合并回开发分支。</li></ul></li></ul><h3 id="github-flow-模型" tabindex="-1">GitHub Flow 模型 <a class="header-anchor" href="#github-flow-模型" aria-label="Permalink to &quot;GitHub Flow 模型&quot;">​</a></h3><p>适用于一些技术水平比较高的团队或开源项目。</p><ul><li><code>master</code>：主分支 <ul><li>主分支上的代码是可以直接部署到生产环境中</li><li>一般会设置分支保护，禁止团队成员直接在主分支上进行提交。</li></ul></li><li>feature： <ul><li>团队成员们可以分主分支中分离出自己的分支进行开发和测试，然后本地分支提交代码，等到开发完成之后可以发起一个 <code>Pull Request（拉请求/合并请求）</code>。团队成员们可以对代码进行 <code>Review</code> 评审，如果没有问题就可以将这个 PR 发布（Deploy）和合并（Merge）到主分支中。</li></ul></li></ul><h2 id="分支命名规范" tabindex="-1">分支命名规范 <a class="header-anchor" href="#分支命名规范" aria-label="Permalink to &quot;分支命名规范&quot;">​</a></h2><p>在命名方面推荐使用带有意义的描述性名称来命名分支</p><ul><li>版本发布分支/Tag示例：v1.0.0</li><li>功能分支示例：feature-login-page</li><li>修复分支示例：hotfix-#issueid-desc</li></ul><h2 id="分支创建规范" tabindex="-1">分支创建规范 <a class="header-anchor" href="#分支创建规范" aria-label="Permalink to &quot;分支创建规范&quot;">​</a></h2><ul><li><p>定期合并已成功验证的分支，及时删除已经合并的分支</p></li><li><p>保持合适的分支数量</p></li><li><p>为分支设置合适的管理权限</p></li></ul><h2 id="git-message规范" tabindex="-1">git message规范 <a class="header-anchor" href="#git-message规范" aria-label="Permalink to &quot;git message规范&quot;">​</a></h2><p>公认的 <code>git message</code> 规范是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noreferrer">angular规范</a>。</p><h3 id="commit-message-的格式" tabindex="-1">commit message 的格式 <a class="header-anchor" href="#commit-message-的格式" aria-label="Permalink to &quot;commit message 的格式&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLANK</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LINE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLANK</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LINE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中，<code>header</code> 是必须的，<code>body</code> 和 <code>footer</code> 可以省略。</p><p>不管哪一部分，任何一行都不得超过72个字符（或100个字符），这是为了避免自动换行影响美观。</p><h4 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h4><p>Header部分只有一行，包括三个字短：<code>type</code>（必需）、<code>scope</code>（可选）和 <code>subjet</code>（必需）。</p><h5 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h5><p>用于说明 commit 的类别，只允许使用下面 7 个标识：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码运行的变动）</li><li>refactor：重构（既不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具变动</li></ul><p>如果 type 为 feat和fix，则该commit将肯定出现在 Change log之中。</p><p>其他情况（docs、style、test、chore）由你决定，要不要放入 Change log，建议是不要。</p><h5 id="scope" tabindex="-1">scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;scope&quot;">​</a></h5><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，试项目不同而不同。</p><p>例如在Angular，可以是 <code>$location</code>, <code>$browser</code>, <code>$compile</code>, <code>$rootScope</code>, <code>ngHref</code>, <code>ngClick</code>, <code>ngView</code> 等。</p><p>如果你的修改影响了不只一个 scope，你可以使用 * 代替。</p><h5 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;subject&quot;">​</a></h5><p>subject是 commit 目的的简短描述，不超过50个字符</p><ul><li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes。</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><hr><h4 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h4><p>body 部分是对本次 commit 的详细描述，可以分成多行。</p><ul><li>使用第一人称现在时，比如 change，而不是 changed 或 changes。</li><li>永远别忘了第二行是空行</li><li>应该说明代码变动的动机，以及与以前行为的对比。</li></ul><h4 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h4><p>Footer 部分只用于以下两种情况</p><h5 id="不兼容变动" tabindex="-1">不兼容变动 <a class="header-anchor" href="#不兼容变动" aria-label="Permalink to &quot;不兼容变动&quot;">​</a></h5><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述，以及变动理由和迁移方法。</p><h5 id="关闭issue" tabindex="-1">关闭Issue <a class="header-anchor" href="#关闭issue" aria-label="Permalink to &quot;关闭Issue&quot;">​</a></h5><p>如果当前 commit 针对某个 issue，那么在 Footer 部分关闭这个 issue。</p><h3 id="revert" tabindex="-1">Revert <a class="header-anchor" href="#revert" aria-label="Permalink to &quot;Revert&quot;">​</a></h3><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 commit 的 Header。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>revert: feat(pencil): add .... This reverts commit ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Body部分的格式是固定的，必需写成 <code>This reverts commit &lt;hash&gt;</code>，其中 hash 是被撤销 commit 的 SHA 标识。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts小标题下面。</p>`,48),o=[t];function r(n,d,h,c,p,u){return a(),i("div",null,o)}const k=e(s,[["render",r]]);export{m as __pageData,k as default};
